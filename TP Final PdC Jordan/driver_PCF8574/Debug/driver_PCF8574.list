
driver_PCF8574.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004244  08004244  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800424c  0800424c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000d4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c560  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d3e  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a90  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b2d  00000000  00000000  0002f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb92  00000000  00000000  0005445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ea7  00000000  00000000  00062fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138e96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003464  00000000  00000000  00138ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800408c 	.word	0x0800408c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	0800408c 	.word	0x0800408c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <_myPCF8574_PrintNumber>:
 */

#include "aplicacion.h"

static void _myPCF8574_PrintNumber (uint8_t col, uint8_t row, const char c[])
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	603a      	str	r2, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	460b      	mov	r3, r1
 80004fe:	71bb      	strb	r3, [r7, #6]
	PCF8574_Clear();
 8000500:	f000 fd57 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_SetCursor(col,row);
 8000504:	79ba      	ldrb	r2, [r7, #6]
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fd68 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr(c);
 8000510:	6838      	ldr	r0, [r7, #0]
 8000512:	f000 fe3c 	bl	800118e <PCF8574_PrintStr>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <myPCF8574_Iniciar>:

void myPCF8574_Iniciar()
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
	PCF8574_Init(2);
 8000522:	2002      	movs	r0, #2
 8000524:	f000 fe48 	bl	80011b8 <PCF8574_Init>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <myPCF8574_SaludoInicial>:

void myPCF8574_SaludoInicial()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	PCF8574_Clear();
 8000530:	f000 fd3f 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_SetCursor(0,0);
 8000534:	2100      	movs	r1, #0
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fd52 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr(" Protocolos  de ");
 800053c:	481b      	ldr	r0, [pc, #108]	; (80005ac <myPCF8574_SaludoInicial+0x80>)
 800053e:	f000 fe26 	bl	800118e <PCF8574_PrintStr>
	PCF8574_SetCursor(0,1);
 8000542:	2101      	movs	r1, #1
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fd4b 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("  Comunicacion  ");
 800054a:	4819      	ldr	r0, [pc, #100]	; (80005b0 <myPCF8574_SaludoInicial+0x84>)
 800054c:	f000 fe1f 	bl	800118e <PCF8574_PrintStr>
	PCF8574_Delay_ms(1500);
 8000550:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000554:	f000 ff84 	bl	8001460 <PCF8574_Delay_ms>
	PCF8574_Clear();
 8000558:	f000 fd2b 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_SetCursor(0,0);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fd3e 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("  en Sistemas   ");
 8000564:	4813      	ldr	r0, [pc, #76]	; (80005b4 <myPCF8574_SaludoInicial+0x88>)
 8000566:	f000 fe12 	bl	800118e <PCF8574_PrintStr>
	PCF8574_SetCursor(0,1);
 800056a:	2101      	movs	r1, #1
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fd37 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("   Embebidos    ");
 8000572:	4811      	ldr	r0, [pc, #68]	; (80005b8 <myPCF8574_SaludoInicial+0x8c>)
 8000574:	f000 fe0b 	bl	800118e <PCF8574_PrintStr>
	PCF8574_Delay_ms(1500);
 8000578:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800057c:	f000 ff70 	bl	8001460 <PCF8574_Delay_ms>
	PCF8574_Clear();
 8000580:	f000 fd17 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_SetCursor(0,0);
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fd2a 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr(" Driver PCF8574 ");
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <myPCF8574_SaludoInicial+0x90>)
 800058e:	f000 fdfe 	bl	800118e <PCF8574_PrintStr>
	PCF8574_SetCursor(0,1);
 8000592:	2101      	movs	r1, #1
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fd23 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("    LCD-I2C     ");
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <myPCF8574_SaludoInicial+0x94>)
 800059c:	f000 fdf7 	bl	800118e <PCF8574_PrintStr>
	PCF8574_Delay_ms(1500);
 80005a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005a4:	f000 ff5c 	bl	8001460 <PCF8574_Delay_ms>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	080040a4 	.word	0x080040a4
 80005b0:	080040b8 	.word	0x080040b8
 80005b4:	080040cc 	.word	0x080040cc
 80005b8:	080040e0 	.word	0x080040e0
 80005bc:	080040f4 	.word	0x080040f4
 80005c0:	08004108 	.word	0x08004108

080005c4 <myPCF8574_Cursor>:
	PCF8574_Backlight();
	PCF8574_Delay_ms(500);
}

void myPCF8574_Cursor()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	PCF8574_Clear();
 80005ca:	f000 fcf2 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_Delay_ms(300);
 80005ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005d2:	f000 ff45 	bl	8001460 <PCF8574_Delay_ms>
	PCF8574_SetCursor(0,0);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fd01 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("Cursor Fijo");
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <myPCF8574_Cursor+0x84>)
 80005e0:	f000 fdd5 	bl	800118e <PCF8574_PrintStr>
	PCF8574_Cursor();
 80005e4:	f000 fd5a 	bl	800109c <PCF8574_Cursor>
	PCF8574_NoBlink();
 80005e8:	f000 fd6e 	bl	80010c8 <PCF8574_NoBlink>
	PCF8574_Delay_ms(1300);
 80005ec:	f240 5014 	movw	r0, #1300	; 0x514
 80005f0:	f000 ff36 	bl	8001460 <PCF8574_Delay_ms>
	PCF8574_SetCursor(0,0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fcf2 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("Cursor Blink");
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <myPCF8574_Cursor+0x88>)
 80005fe:	f000 fdc6 	bl	800118e <PCF8574_PrintStr>
	for(uint8_t i=0; i<4; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e008      	b.n	800061a <myPCF8574_Cursor+0x56>
	{
		PCF8574_Blink();
 8000608:	f000 fd74 	bl	80010f4 <PCF8574_Blink>
		PCF8574_Delay_ms(700);
 800060c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000610:	f000 ff26 	bl	8001460 <PCF8574_Delay_ms>
	for(uint8_t i=0; i<4; i++)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	3301      	adds	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d9f3      	bls.n	8000608 <myPCF8574_Cursor+0x44>
	}
	PCF8574_Clear();
 8000620:	f000 fcc7 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_SetCursor(0,0);
 8000624:	2100      	movs	r1, #0
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fcda 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_NoBlink();
 800062c:	f000 fd4c 	bl	80010c8 <PCF8574_NoBlink>
	PCF8474_NoCursor();
 8000630:	f000 fd1e 	bl	8001070 <PCF8474_NoCursor>
	PCF8574_Clear();
 8000634:	f000 fcbd 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_Delay_ms(300);
 8000638:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800063c:	f000 ff10 	bl	8001460 <PCF8574_Delay_ms>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	0800413c 	.word	0x0800413c
 800064c:	08004148 	.word	0x08004148

08000650 <myPCF8574_CorrimientoIzquierda>:

void myPCF8574_CorrimientoIzquierda()
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	PCF8574_SetCursor(0,0);
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fcc1 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("Corre Izquierda");
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <myPCF8574_CorrimientoIzquierda+0x4c>)
 8000660:	f000 fd95 	bl	800118e <PCF8574_PrintStr>
	PCF8574_Delay_ms(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000668:	f000 fefa 	bl	8001460 <PCF8574_Delay_ms>
	for(int x=0; x<15; x++)
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	e007      	b.n	8000682 <myPCF8574_CorrimientoIzquierda+0x32>
	{
		PCF8474_ScrollDisplayLeft();
 8000672:	f000 fd55 	bl	8001120 <PCF8474_ScrollDisplayLeft>
		PCF8574_Delay_ms(250);
 8000676:	20fa      	movs	r0, #250	; 0xfa
 8000678:	f000 fef2 	bl	8001460 <PCF8574_Delay_ms>
	for(int x=0; x<15; x++)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0e      	cmp	r3, #14
 8000686:	ddf4      	ble.n	8000672 <myPCF8574_CorrimientoIzquierda+0x22>
	}
	PCF8574_Clear();
 8000688:	f000 fc93 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_Delay_ms(300);
 800068c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000690:	f000 fee6 	bl	8001460 <PCF8574_Delay_ms>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004158 	.word	0x08004158

080006a0 <myPCF8574_CorrimientoDerecha>:

void myPCF8574_CorrimientoDerecha()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	PCF8574_SetCursor(0,0);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fc99 	bl	8000fe0 <PCF8574_SetCursor>
	PCF8574_PrintStr("Corre Derecha");
 80006ae:	480f      	ldr	r0, [pc, #60]	; (80006ec <myPCF8574_CorrimientoDerecha+0x4c>)
 80006b0:	f000 fd6d 	bl	800118e <PCF8574_PrintStr>
	PCF8574_Delay_ms(500);
 80006b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b8:	f000 fed2 	bl	8001460 <PCF8574_Delay_ms>
	for(int x=0; x<13; x++)
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	e007      	b.n	80006d2 <myPCF8574_CorrimientoDerecha+0x32>
	{
		PCF8574_ScrollDisplayRight();
 80006c2:	f000 fd34 	bl	800112e <PCF8574_ScrollDisplayRight>
		PCF8574_Delay_ms(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f000 feca 	bl	8001460 <PCF8574_Delay_ms>
	for(int x=0; x<13; x++)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0c      	cmp	r3, #12
 80006d6:	ddf4      	ble.n	80006c2 <myPCF8574_CorrimientoDerecha+0x22>
	}
	PCF8574_Clear();
 80006d8:	f000 fc6b 	bl	8000fb2 <PCF8574_Clear>
	PCF8574_Delay_ms(300);
 80006dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006e0:	f000 febe 	bl	8001460 <PCF8574_Delay_ms>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08004168 	.word	0x08004168

080006f0 <myPCF8574_ImprimeNumero>:

void myPCF8574_ImprimeNumero()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
	char snum[5];
	for(int16_t x=0; x<6; x++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	81fb      	strh	r3, [r7, #14]
 80006fa:	e016      	b.n	800072a <myPCF8574_ImprimeNumero+0x3a>
	{
		itoa(x, snum, 10);
 80006fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000700:	4639      	mov	r1, r7
 8000702:	220a      	movs	r2, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f002 ff77 	bl	80035f8 <itoa>
		_myPCF8574_PrintNumber(5,0,snum);
 800070a:	463b      	mov	r3, r7
 800070c:	461a      	mov	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	2005      	movs	r0, #5
 8000712:	f7ff feed 	bl	80004f0 <_myPCF8574_PrintNumber>
		PCF8574_Delay_ms (500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f000 fea1 	bl	8001460 <PCF8574_Delay_ms>
	for(int16_t x=0; x<6; x++)
 800071e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000722:	b29b      	uxth	r3, r3
 8000724:	3301      	adds	r3, #1
 8000726:	b29b      	uxth	r3, r3
 8000728:	81fb      	strh	r3, [r7, #14]
 800072a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800072e:	2b05      	cmp	r3, #5
 8000730:	dde4      	ble.n	80006fc <myPCF8574_ImprimeNumero+0xc>
	}
	for(int16_t x=6; x<11; x++)
 8000732:	2306      	movs	r3, #6
 8000734:	81bb      	strh	r3, [r7, #12]
 8000736:	e016      	b.n	8000766 <myPCF8574_ImprimeNumero+0x76>
	{
		itoa(x, snum, 10);
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4639      	mov	r1, r7
 800073e:	220a      	movs	r2, #10
 8000740:	4618      	mov	r0, r3
 8000742:	f002 ff59 	bl	80035f8 <itoa>
		_myPCF8574_PrintNumber(5,1,snum);
 8000746:	463b      	mov	r3, r7
 8000748:	461a      	mov	r2, r3
 800074a:	2101      	movs	r1, #1
 800074c:	2005      	movs	r0, #5
 800074e:	f7ff fecf 	bl	80004f0 <_myPCF8574_PrintNumber>
		PCF8574_Delay_ms (500);
 8000752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000756:	f000 fe83 	bl	8001460 <PCF8574_Delay_ms>
	for(int16_t x=6; x<11; x++)
 800075a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800075e:	b29b      	uxth	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b29b      	uxth	r3, r3
 8000764:	81bb      	strh	r3, [r7, #12]
 8000766:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800076a:	2b0a      	cmp	r3, #10
 800076c:	dde4      	ble.n	8000738 <myPCF8574_ImprimeNumero+0x48>
	}
	for(int16_t x=11; x<16; x++)
 800076e:	230b      	movs	r3, #11
 8000770:	817b      	strh	r3, [r7, #10]
 8000772:	e016      	b.n	80007a2 <myPCF8574_ImprimeNumero+0xb2>
	{
		itoa(x, snum, 10);
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	4639      	mov	r1, r7
 800077a:	220a      	movs	r2, #10
 800077c:	4618      	mov	r0, r3
 800077e:	f002 ff3b 	bl	80035f8 <itoa>
		_myPCF8574_PrintNumber(10,0,snum);
 8000782:	463b      	mov	r3, r7
 8000784:	461a      	mov	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	200a      	movs	r0, #10
 800078a:	f7ff feb1 	bl	80004f0 <_myPCF8574_PrintNumber>
		PCF8574_Delay_ms (500);
 800078e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000792:	f000 fe65 	bl	8001460 <PCF8574_Delay_ms>
	for(int16_t x=11; x<16; x++)
 8000796:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800079a:	b29b      	uxth	r3, r3
 800079c:	3301      	adds	r3, #1
 800079e:	b29b      	uxth	r3, r3
 80007a0:	817b      	strh	r3, [r7, #10]
 80007a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007a6:	2b0f      	cmp	r3, #15
 80007a8:	dde4      	ble.n	8000774 <myPCF8574_ImprimeNumero+0x84>
	}
	for(int16_t x=16; x<21; x++)
 80007aa:	2310      	movs	r3, #16
 80007ac:	813b      	strh	r3, [r7, #8]
 80007ae:	e016      	b.n	80007de <myPCF8574_ImprimeNumero+0xee>
	{
		itoa(x, snum, 10);
 80007b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007b4:	4639      	mov	r1, r7
 80007b6:	220a      	movs	r2, #10
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 ff1d 	bl	80035f8 <itoa>
		_myPCF8574_PrintNumber(10,1,snum);
 80007be:	463b      	mov	r3, r7
 80007c0:	461a      	mov	r2, r3
 80007c2:	2101      	movs	r1, #1
 80007c4:	200a      	movs	r0, #10
 80007c6:	f7ff fe93 	bl	80004f0 <_myPCF8574_PrintNumber>
		PCF8574_Delay_ms (500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ce:	f000 fe47 	bl	8001460 <PCF8574_Delay_ms>
	for(int16_t x=16; x<21; x++)
 80007d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b29b      	uxth	r3, r3
 80007dc:	813b      	strh	r3, [r7, #8]
 80007de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007e2:	2b14      	cmp	r3, #20
 80007e4:	dde4      	ble.n	80007b0 <myPCF8574_ImprimeNumero+0xc0>
	}
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f4:	f000 fe5c 	bl	80014b0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80007f8:	f000 f81e 	bl	8000838 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007fc:	f000 f8f0 	bl	80009e0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000800:	f000 f8c4 	bl	800098c <MX_USART3_UART_Init>
	printf("UART OK\r\n");
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <main+0x40>)
 8000806:	f002 ff6f 	bl	80036e8 <puts>

	MX_I2C1_Init();
 800080a:	f000 f87f 	bl	800090c <MX_I2C1_Init>
	printf("I2C1 OK\r\n");
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <main+0x44>)
 8000810:	f002 ff6a 	bl	80036e8 <puts>

	/* Display LCD16x2 */
    myPCF8574_Iniciar();
 8000814:	f7ff fe83 	bl	800051e <myPCF8574_Iniciar>
    myPCF8574_SaludoInicial();
 8000818:	f7ff fe88 	bl	800052c <myPCF8574_SaludoInicial>
    myPCF8574_Cursor();
 800081c:	f7ff fed2 	bl	80005c4 <myPCF8574_Cursor>
    myPCF8574_CorrimientoIzquierda();
 8000820:	f7ff ff16 	bl	8000650 <myPCF8574_CorrimientoIzquierda>
    myPCF8574_CorrimientoDerecha();
 8000824:	f7ff ff3c 	bl	80006a0 <myPCF8574_CorrimientoDerecha>

	while (1)
	{
		myPCF8574_ImprimeNumero();
 8000828:	f7ff ff62 	bl	80006f0 <myPCF8574_ImprimeNumero>
 800082c:	e7fc      	b.n	8000828 <main+0x38>
 800082e:	bf00      	nop
 8000830:	08004178 	.word	0x08004178
 8000834:	08004184 	.word	0x08004184

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fed8 	bl	80035fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a27      	ldr	r2, [pc, #156]	; (8000904 <SystemClock_Config+0xcc>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <SystemClock_Config+0xd0>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000898:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008ac:	23a8      	movs	r3, #168	; 0xa8
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b4:	2307      	movs	r3, #7
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fdff 	bl	80024c0 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c8:	f000 f99a 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2105      	movs	r1, #5
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 f860 	bl	80029b0 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008f6:	f000 f983 	bl	8000c00 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	; 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_I2C1_Init+0x74>)
 800092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_I2C1_Init+0x74>)
 800094a:	f001 f8f3 	bl	8001b34 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 f954 	bl	8000c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_I2C1_Init+0x74>)
 800095c:	f001 fd35 	bl	80023ca <HAL_I2CEx_ConfigAnalogFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000966:	f000 f94b 	bl	8000c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2C1_Init+0x74>)
 800096e:	f001 fd68 	bl	8002442 <HAL_I2CEx_ConfigDigitalFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 f942 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000009c 	.word	0x2000009c
 8000984:	40005400 	.word	0x40005400
 8000988:	000186a0 	.word	0x000186a0

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART3_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f002 fa14 	bl	8002df0 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f917 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000f0 	.word	0x200000f0
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b7c      	ldr	r3, [pc, #496]	; (8000bec <MX_GPIO_Init+0x20c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a7b      	ldr	r2, [pc, #492]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b79      	ldr	r3, [pc, #484]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b75      	ldr	r3, [pc, #468]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a74      	ldr	r2, [pc, #464]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b72      	ldr	r3, [pc, #456]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b6e      	ldr	r3, [pc, #440]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a6d      	ldr	r2, [pc, #436]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b6b      	ldr	r3, [pc, #428]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b67      	ldr	r3, [pc, #412]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a66      	ldr	r2, [pc, #408]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b64      	ldr	r3, [pc, #400]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b60      	ldr	r3, [pc, #384]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a5f      	ldr	r2, [pc, #380]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b59      	ldr	r3, [pc, #356]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a58      	ldr	r2, [pc, #352]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <MX_GPIO_Init+0x20c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa4:	4852      	ldr	r0, [pc, #328]	; (8000bf0 <MX_GPIO_Init+0x210>)
 8000aa6:	f001 f82b 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4851      	ldr	r0, [pc, #324]	; (8000bf4 <MX_GPIO_Init+0x214>)
 8000ab0:	f001 f826 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	484b      	ldr	r0, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x218>)
 8000acc:	f000 fe6c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad0:	2332      	movs	r3, #50	; 0x32
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4843      	ldr	r0, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x218>)
 8000aec:	f000 fe5c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af0:	2386      	movs	r3, #134	; 0x86
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b00:	230b      	movs	r3, #11
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	483c      	ldr	r0, [pc, #240]	; (8000bfc <MX_GPIO_Init+0x21c>)
 8000b0c:	f000 fe4c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4831      	ldr	r0, [pc, #196]	; (8000bf0 <MX_GPIO_Init+0x210>)
 8000b2a:	f000 fe3d 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b40:	230b      	movs	r3, #11
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <MX_GPIO_Init+0x210>)
 8000b4c:	f000 fe2c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <MX_GPIO_Init+0x214>)
 8000b68:	f000 fe1e 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <MX_GPIO_Init+0x214>)
 8000b80:	f000 fe12 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b96:	230a      	movs	r3, #10
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <MX_GPIO_Init+0x21c>)
 8000ba2:	f000 fe01 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <MX_GPIO_Init+0x21c>)
 8000bbc:	f000 fdf4 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	230b      	movs	r3, #11
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_GPIO_Init+0x214>)
 8000bde:	f000 fde3 	bl	80017a8 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3730      	adds	r7, #48	; 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  // Place your implementation of fputc here
  // e.g. write a character to the USART3 and Loop until the end of transmission
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c14:	1d39      	adds	r1, r7, #4
 8000c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <__io_putchar+0x20>)
 8000c1e:	f002 f934 	bl	8002e8a <HAL_UART_Transmit>

  return ch;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200000f0 	.word	0x200000f0

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_I2C_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12c      	bne.n	8000cfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <HAL_I2C_MspInit+0x8c>)
 8000cdc:	f000 fd64 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12c      	bne.n	8000d8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x8c>)
 8000d88:	f000 fd0e 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004800 	.word	0x40004800
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 fbb2 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e00a      	b.n	8000e1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e06:	f3af 8000 	nop.w
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf0      	blt.n	8000e06 <_read+0x12>
	}

return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e009      	b.n	8000e54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fedf 	bl	8000c0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf1      	blt.n	8000e40 <_write+0x12>
	}
	return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_close>:

int _close(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_isatty>:

int _isatty(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f002 fb38 	bl	8003574 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20030000 	.word	0x20030000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000134 	.word	0x20000134
 8000f38:	20000158 	.word	0x20000158

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8a:	f7ff ffd7 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f002 faf7 	bl	8003580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fc2d 	bl	80007f0 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000fa4:	08004254 	.word	0x08004254
  ldr r2, =_sbss
 8000fa8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000fac:	20000154 	.word	0x20000154

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>

08000fb2 <PCF8574_Clear>:
};



void PCF8574_Clear()
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  _PCF8574_SendCommand(LCD_CLEARDISPLAY);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 f986 	bl	80012c8 <_PCF8574_SendCommand>
  PCF8574_Delay_us(2000);
 8000fbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc0:	f000 fa26 	bl	8001410 <PCF8574_Delay_us>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <PCF8474_Home>:

void PCF8474_Home()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  _PCF8574_SendCommand(LCD_RETURNHOME);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f000 f97b 	bl	80012c8 <_PCF8574_SendCommand>
  PCF8574_Delay_us(2000);
 8000fd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd6:	f000 fa1b 	bl	8001410 <PCF8574_Delay_us>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <PCF8574_SetCursor>:

void PCF8574_SetCursor(uint8_t col, uint8_t row)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <PCF8574_SetCursor+0x5c>)
 8000ff2:	f107 0408 	add.w	r4, r7, #8
 8000ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <PCF8574_SetCursor+0x60>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	79ba      	ldrb	r2, [r7, #6]
 8001002:	429a      	cmp	r2, r3
 8001004:	d303      	bcc.n	800100e <PCF8574_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <PCF8574_SetCursor+0x60>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	71bb      	strb	r3, [r7, #6]
  }
  _PCF8574_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	3318      	adds	r3, #24
 8001014:	443b      	add	r3, r7
 8001016:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4413      	add	r3, r2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	b25b      	sxtb	r3, r3
 8001024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001028:	b25b      	sxtb	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f94b 	bl	80012c8 <_PCF8574_SendCommand>
}
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	08004190 	.word	0x08004190
 8001040:	2000013b 	.word	0x2000013b

08001044 <PCF8474_Display>:
  dpControl &= ~LCD_DISPLAYON;
  _PCF8574_SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void PCF8474_Display()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <PCF8474_Display+0x28>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <PCF8474_Display+0x28>)
 8001054:	701a      	strb	r2, [r3, #0]
  _PCF8574_SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <PCF8474_Display+0x28>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f931 	bl	80012c8 <_PCF8574_SendCommand>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000139 	.word	0x20000139

08001070 <PCF8474_NoCursor>:

void PCF8474_NoCursor()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <PCF8474_NoCursor+0x28>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <PCF8474_NoCursor+0x28>)
 8001080:	701a      	strb	r2, [r3, #0]
  _PCF8574_SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <PCF8474_NoCursor+0x28>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f91b 	bl	80012c8 <_PCF8574_SendCommand>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000139 	.word	0x20000139

0800109c <PCF8574_Cursor>:

void PCF8574_Cursor()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <PCF8574_Cursor+0x28>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <PCF8574_Cursor+0x28>)
 80010ac:	701a      	strb	r2, [r3, #0]
  _PCF8574_SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <PCF8574_Cursor+0x28>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f905 	bl	80012c8 <_PCF8574_SendCommand>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000139 	.word	0x20000139

080010c8 <PCF8574_NoBlink>:

void PCF8574_NoBlink()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <PCF8574_NoBlink+0x28>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <PCF8574_NoBlink+0x28>)
 80010d8:	701a      	strb	r2, [r3, #0]
  _PCF8574_SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <PCF8574_NoBlink+0x28>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f8ef 	bl	80012c8 <_PCF8574_SendCommand>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000139 	.word	0x20000139

080010f4 <PCF8574_Blink>:

void PCF8574_Blink()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <PCF8574_Blink+0x28>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <PCF8574_Blink+0x28>)
 8001104:	701a      	strb	r2, [r3, #0]
  _PCF8574_SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <PCF8574_Blink+0x28>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f8d9 	bl	80012c8 <_PCF8574_SendCommand>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000139 	.word	0x20000139

08001120 <PCF8474_ScrollDisplayLeft>:

void PCF8474_ScrollDisplayLeft(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  _PCF8574_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8001124:	2018      	movs	r0, #24
 8001126:	f000 f8cf 	bl	80012c8 <_PCF8574_SendCommand>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <PCF8574_ScrollDisplayRight>:

void PCF8574_ScrollDisplayRight(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  _PCF8574_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 8001132:	201c      	movs	r0, #28
 8001134:	f000 f8c8 	bl	80012c8 <_PCF8574_SendCommand>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <PCF8474_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  _PCF8574_SendCommand(LCD_ENTRYMODESET | dpMode);
}

void PCF8474_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	71fb      	strb	r3, [r7, #7]
  _PCF8574_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800115a:	b25b      	sxtb	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f8b2 	bl	80012c8 <_PCF8574_SendCommand>
  for (int i=0; i<8; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e009      	b.n	800117e <PCF8474_CreateSpecialChar+0x42>
  {
    _PCF8574_SendChar(charmap[i]);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f8b6 	bl	80012e4 <_PCF8574_SendChar>
  for (int i=0; i<8; i++)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b07      	cmp	r3, #7
 8001182:	ddf2      	ble.n	800116a <PCF8474_CreateSpecialChar+0x2e>
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <PCF8574_PrintStr>:
{
	PCF8474_CreateSpecialChar(char_num, rows);
}

void PCF8574_PrintStr(const char c[])
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  while(*c) _PCF8574_SendChar(*c++);
 8001196:	e006      	b.n	80011a6 <PCF8574_PrintStr+0x18>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f89f 	bl	80012e4 <_PCF8574_SendChar>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f4      	bne.n	8001198 <PCF8574_PrintStr+0xa>
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <PCF8574_Init>:
  dpBacklight=LCD_BACKLIGHT;
  PCF8574_ExpanderWrite(0, dpBacklight);
}

void PCF8574_Init(uint8_t rows)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <PCF8574_Init+0xf4>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <PCF8574_Init+0xf8>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <PCF8574_Init+0xfc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <PCF8574_Init+0xf4>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d907      	bls.n	80011ec <PCF8574_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80011dc:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <PCF8574_Init+0xfc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <PCF8574_Init+0xfc>)
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e006      	b.n	80011fa <PCF8574_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <PCF8574_Init+0xfc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <PCF8574_Init+0xfc>)
 80011f8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  PCF8574_Delay_Init();			// hardware
 80011fa:	f000 f8df 	bl	80013bc <PCF8574_Delay_Init>
  PCF8574_Delay_ms(50);			// hardware
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f000 f92e 	bl	8001460 <PCF8574_Delay_ms>

  PCF8574_ExpanderWrite(dpBacklight, dpBacklight);
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <PCF8574_Init+0xf8>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <PCF8574_Init+0xf8>)
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f932 	bl	8001478 <PCF8574_ExpanderWrite>
  PCF8574_Delay_ms(1000);		// hardware
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f000 f922 	bl	8001460 <PCF8574_Delay_ms>

  /* 4bit Mode */
  _PCF8574_Write4Bits(0x03 << 4);
 800121c:	2030      	movs	r0, #48	; 0x30
 800121e:	f000 f8b7 	bl	8001390 <_PCF8574_Write4Bits>
  PCF8574_Delay_us(4500);		// hardware
 8001222:	f241 1094 	movw	r0, #4500	; 0x1194
 8001226:	f000 f8f3 	bl	8001410 <PCF8574_Delay_us>

  _PCF8574_Write4Bits(0x03 << 4);
 800122a:	2030      	movs	r0, #48	; 0x30
 800122c:	f000 f8b0 	bl	8001390 <_PCF8574_Write4Bits>
  PCF8574_Delay_us(4500);
 8001230:	f241 1094 	movw	r0, #4500	; 0x1194
 8001234:	f000 f8ec 	bl	8001410 <PCF8574_Delay_us>

  _PCF8574_Write4Bits(0x03 << 4);
 8001238:	2030      	movs	r0, #48	; 0x30
 800123a:	f000 f8a9 	bl	8001390 <_PCF8574_Write4Bits>
  PCF8574_Delay_us(4500);
 800123e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001242:	f000 f8e5 	bl	8001410 <PCF8574_Delay_us>

  _PCF8574_Write4Bits(0x02 << 4);
 8001246:	2020      	movs	r0, #32
 8001248:	f000 f8a2 	bl	8001390 <_PCF8574_Write4Bits>
  PCF8574_Delay_us(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f000 f8df 	bl	8001410 <PCF8574_Delay_us>

  /* Display Control */
  _PCF8574_SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <PCF8574_Init+0xfc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f833 	bl	80012c8 <_PCF8574_SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <PCF8574_Init+0x100>)
 8001264:	2204      	movs	r2, #4
 8001266:	701a      	strb	r2, [r3, #0]
  PCF8474_Display();
 8001268:	f7ff feec 	bl	8001044 <PCF8474_Display>
  PCF8574_Clear();
 800126c:	f7ff fea1 	bl	8000fb2 <PCF8574_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <PCF8574_Init+0x104>)
 8001272:	2202      	movs	r2, #2
 8001274:	701a      	strb	r2, [r3, #0]
  _PCF8574_SendCommand(LCD_ENTRYMODESET | dpMode);
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <PCF8574_Init+0x104>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f821 	bl	80012c8 <_PCF8574_SendCommand>
  PCF8574_Delay_us(4500);
 8001286:	f241 1094 	movw	r0, #4500	; 0x1194
 800128a:	f000 f8c1 	bl	8001410 <PCF8574_Delay_us>

  PCF8474_CreateSpecialChar(0, special1);
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <PCF8574_Init+0x108>)
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff ff53 	bl	800113c <PCF8474_CreateSpecialChar>
  PCF8474_CreateSpecialChar(1, special2);
 8001296:	490b      	ldr	r1, [pc, #44]	; (80012c4 <PCF8574_Init+0x10c>)
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ff4f 	bl	800113c <PCF8474_CreateSpecialChar>

  PCF8474_Home();
 800129e:	f7ff fe93 	bl	8000fc8 <PCF8474_Home>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000013b 	.word	0x2000013b
 80012b0:	2000013c 	.word	0x2000013c
 80012b4:	20000138 	.word	0x20000138
 80012b8:	20000139 	.word	0x20000139
 80012bc:	2000013a 	.word	0x2000013a
 80012c0:	20000004 	.word	0x20000004
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <_PCF8574_SendCommand>:


//----------Funciones Static-------------//
static void _PCF8574_SendCommand(uint8_t cmd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  _PCF8574_Send(cmd, 0);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f812 	bl	8001300 <_PCF8574_Send>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_PCF8574_SendChar>:

static void _PCF8574_SendChar(uint8_t ch)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  _PCF8574_Send(ch, RS);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f804 	bl	8001300 <_PCF8574_Send>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_PCF8574_Send>:

static void _PCF8574_Send(uint8_t value, uint8_t mode)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	4613      	mov	r3, r2
 800130e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f023 030f 	bic.w	r3, r3, #15
 8001316:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	73bb      	strb	r3, [r7, #14]
  _PCF8574_Write4Bits((highnib)|mode);
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	4313      	orrs	r3, r2
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f832 	bl	8001390 <_PCF8574_Write4Bits>
  _PCF8574_Write4Bits((lownib)|mode);
 800132c:	7bba      	ldrb	r2, [r7, #14]
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	4313      	orrs	r3, r2
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f82b 	bl	8001390 <_PCF8574_Write4Bits>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <_PCF8574_PulseEnable>:

static void _PCF8574_PulseEnable(uint8_t _data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  PCF8574_ExpanderWrite(_data | ENABLE, dpBacklight);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4a0d      	ldr	r2, [pc, #52]	; (800138c <_PCF8574_PulseEnable+0x48>)
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f88b 	bl	8001478 <PCF8574_ExpanderWrite>
  PCF8574_Delay_us(20);
 8001362:	2014      	movs	r0, #20
 8001364:	f000 f854 	bl	8001410 <PCF8574_Delay_us>

  PCF8574_ExpanderWrite(_data & ~ENABLE, dpBacklight);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <_PCF8574_PulseEnable+0x48>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f87e 	bl	8001478 <PCF8574_ExpanderWrite>
  PCF8574_Delay_us(20);
 800137c:	2014      	movs	r0, #20
 800137e:	f000 f847 	bl	8001410 <PCF8574_Delay_us>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000013c 	.word	0x2000013c

08001390 <_PCF8574_Write4Bits>:

void _PCF8574_Write4Bits(uint8_t value)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	PCF8574_ExpanderWrite(value, dpBacklight);	//Hardware
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_PCF8574_Write4Bits+0x28>)
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f868 	bl	8001478 <PCF8574_ExpanderWrite>
	_PCF8574_PulseEnable(value);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffca 	bl	8001344 <_PCF8574_PulseEnable>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000013c 	.word	0x2000013c

080013bc <PCF8574_Delay_Init>:

extern I2C_HandleTypeDef hi2c1;


void PCF8574_Delay_Init(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <PCF8574_Delay_Init+0x4c>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4a10      	ldr	r2, [pc, #64]	; (8001408 <PCF8574_Delay_Init+0x4c>)
 80013c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ca:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <PCF8574_Delay_Init+0x4c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <PCF8574_Delay_Init+0x4c>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d6:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <PCF8574_Delay_Init+0x50>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <PCF8574_Delay_Init+0x50>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
	DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <PCF8574_Delay_Init+0x50>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <PCF8574_Delay_Init+0x50>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <PCF8574_Delay_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80013f6:	bf00      	nop
	__ASM volatile ("NOP");
 80013f8:	bf00      	nop
	__ASM volatile ("NOP");
 80013fa:	bf00      	nop
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000edf0 	.word	0xe000edf0
 800140c:	e0001000 	.word	0xe0001000

08001410 <PCF8574_Delay_us>:

void PCF8574_Delay_us(uint32_t us)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <PCF8574_Delay_us+0x44>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <PCF8574_Delay_us+0x48>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9a      	lsrs	r2, r3, #18
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <PCF8574_Delay_us+0x4c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;
	do
	{
		cnt = DWT->CYCCNT - start;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <PCF8574_Delay_us+0x4c>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	60fb      	str	r3, [r7, #12]
	} while(cnt < cycles);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f6      	bhi.n	8001432 <PCF8574_Delay_us+0x22>
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000
 8001458:	431bde83 	.word	0x431bde83
 800145c:	e0001000 	.word	0xe0001000

08001460 <PCF8574_Delay_ms>:

void PCF8574_Delay_ms(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f893 	bl	8001594 <HAL_Delay>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <PCF8574_ExpanderWrite>:

void PCF8574_ExpanderWrite(uint8_t _data, uint8_t dpBacklight)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	uint8_t data = _data | dpBacklight;
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	4313      	orrs	r3, r2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001492:	f107 020f 	add.w	r2, r7, #15
 8001496:	230a      	movs	r3, #10
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	2170      	movs	r1, #112	; 0x70
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <PCF8574_ExpanderWrite+0x34>)
 80014a0:	f000 fc8c 	bl	8001dbc <HAL_I2C_Master_Transmit>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000009c 	.word	0x2000009c

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f931 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fba4 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f93b 	bl	800178e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f911 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000018 	.word	0x20000018
 8001550:	20000014 	.word	0x20000014

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000018 	.word	0x20000018
 8001578:	20000140 	.word	0x20000140

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000140 	.word	0x20000140

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000018 	.word	0x20000018

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff47 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff5c 	bl	8001624 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffb0 	bl	80016fc <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e177      	b.n	8001ab4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8166 	bne.w	8001aae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80c0 	beq.w	8001aae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b66      	ldr	r3, [pc, #408]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a65      	ldr	r2, [pc, #404]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a61      	ldr	r2, [pc, #388]	; (8001ad0 <HAL_GPIO_Init+0x328>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d037      	beq.n	80019e6 <HAL_GPIO_Init+0x23e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d031      	beq.n	80019e2 <HAL_GPIO_Init+0x23a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a56      	ldr	r2, [pc, #344]	; (8001adc <HAL_GPIO_Init+0x334>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d02b      	beq.n	80019de <HAL_GPIO_Init+0x236>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a55      	ldr	r2, [pc, #340]	; (8001ae0 <HAL_GPIO_Init+0x338>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d025      	beq.n	80019da <HAL_GPIO_Init+0x232>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a54      	ldr	r2, [pc, #336]	; (8001ae4 <HAL_GPIO_Init+0x33c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01f      	beq.n	80019d6 <HAL_GPIO_Init+0x22e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a53      	ldr	r2, [pc, #332]	; (8001ae8 <HAL_GPIO_Init+0x340>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d019      	beq.n	80019d2 <HAL_GPIO_Init+0x22a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_GPIO_Init+0x344>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0x226>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_GPIO_Init+0x348>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_GPIO_Init+0x222>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a50      	ldr	r2, [pc, #320]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x21e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_GPIO_Init+0x350>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_GPIO_Init+0x21a>
 80019be:	2309      	movs	r3, #9
 80019c0:	e012      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019c2:	230a      	movs	r3, #10
 80019c4:	e010      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019c6:	2308      	movs	r3, #8
 80019c8:	e00e      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e00c      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019ce:	2306      	movs	r3, #6
 80019d0:	e00a      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019d2:	2305      	movs	r3, #5
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019d6:	2304      	movs	r3, #4
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x240>
 80019e6:	2300      	movs	r3, #0
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f002 0203 	and.w	r2, r2, #3
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <HAL_GPIO_Init+0x328>)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2a:	4a34      	ldr	r2, [pc, #208]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a30:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a54:	4a29      	ldr	r2, [pc, #164]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <HAL_GPIO_Init+0x354>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	f67f ae84 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40021400 	.word	0x40021400
 8001aec:	40021800 	.word	0x40021800
 8001af0:	40021c00 	.word	0x40021c00
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40022400 	.word	0x40022400
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e12b      	b.n	8001d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f890 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b98:	f001 f902 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a81      	ldr	r2, [pc, #516]	; (8001da8 <HAL_I2C_Init+0x274>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d807      	bhi.n	8001bb8 <HAL_I2C_Init+0x84>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a80      	ldr	r2, [pc, #512]	; (8001dac <HAL_I2C_Init+0x278>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bf94      	ite	ls
 8001bb0:	2301      	movls	r3, #1
 8001bb2:	2300      	movhi	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e006      	b.n	8001bc6 <HAL_I2C_Init+0x92>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a7d      	ldr	r2, [pc, #500]	; (8001db0 <HAL_I2C_Init+0x27c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	bf94      	ite	ls
 8001bc0:	2301      	movls	r3, #1
 8001bc2:	2300      	movhi	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0e7      	b.n	8001d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <HAL_I2C_Init+0x280>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_I2C_Init+0x274>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d802      	bhi.n	8001c08 <HAL_I2C_Init+0xd4>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3301      	adds	r3, #1
 8001c06:	e009      	b.n	8001c1c <HAL_I2C_Init+0xe8>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	4a69      	ldr	r2, [pc, #420]	; (8001db8 <HAL_I2C_Init+0x284>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	495c      	ldr	r1, [pc, #368]	; (8001da8 <HAL_I2C_Init+0x274>)
 8001c38:	428b      	cmp	r3, r1
 8001c3a:	d819      	bhi.n	8001c70 <HAL_I2C_Init+0x13c>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1e59      	subs	r1, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4a:	1c59      	adds	r1, r3, #1
 8001c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c50:	400b      	ands	r3, r1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <HAL_I2C_Init+0x138>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1e59      	subs	r1, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6a:	e051      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e04f      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d111      	bne.n	8001c9c <HAL_I2C_Init+0x168>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	440b      	add	r3, r1
 8001c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e012      	b.n	8001cc2 <HAL_I2C_Init+0x18e>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1e58      	subs	r0, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	0099      	lsls	r1, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Init+0x196>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e022      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_I2C_Init+0x1bc>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1e58      	subs	r0, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6859      	ldr	r1, [r3, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	440b      	add	r3, r1
 8001ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cee:	e00f      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e58      	subs	r0, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	6809      	ldr	r1, [r1, #0]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6911      	ldr	r1, [r2, #16]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68d2      	ldr	r2, [r2, #12]
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	000186a0 	.word	0x000186a0
 8001dac:	001e847f 	.word	0x001e847f
 8001db0:	003d08ff 	.word	0x003d08ff
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	10624dd3 	.word	0x10624dd3

08001dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fbd4 	bl	800157c <HAL_GetTick>
 8001dd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	f040 80e0 	bne.w	8001fa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	2201      	movs	r2, #1
 8001dec:	4970      	ldr	r1, [pc, #448]	; (8001fb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f964 	bl	80020bc <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e0d3      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2C_Master_Transmit+0x50>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d007      	beq.n	8001e32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2221      	movs	r2, #33	; 0x21
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	893a      	ldrh	r2, [r7, #8]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a50      	ldr	r2, [pc, #320]	; (8001fb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f89c 	bl	8001fb8 <I2C_MasterRequestWrite>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e08d      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ea0:	e066      	b.n	8001f70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f9de 	bl	8002268 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d107      	bne.n	8001eca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_I2C_Master_Transmit+0x188>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d017      	beq.n	8001f44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f9ce 	bl	80022ea <I2C_WaitOnBTFFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00d      	beq.n	8001f70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d107      	bne.n	8001f6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e01a      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d194      	bne.n	8001ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	00100002 	.word	0x00100002
 8001fb4:	ffff0000 	.word	0xffff0000

08001fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d006      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fe0:	d108      	bne.n	8001ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d107      	bne.n	800200c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f84f 	bl	80020bc <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	d103      	bne.n	800203c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e035      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002048:	d108      	bne.n	800205c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e01b      	b.n	8002094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	11db      	asrs	r3, r3, #7
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0306 	and.w	r3, r3, #6
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f063 030f 	orn	r3, r3, #15
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <I2C_MasterRequestWrite+0xfc>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f875 	bl	800216a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e010      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <I2C_MasterRequestWrite+0x100>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f865 	bl	800216a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00010008 	.word	0x00010008
 80020b8:	00010002 	.word	0x00010002

080020bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020cc:	e025      	b.n	800211a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d021      	beq.n	800211a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7ff fa51 	bl	800157c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d116      	bne.n	800211a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e023      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10d      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4013      	ands	r3, r2
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	e00c      	b.n	800215a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4013      	ands	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	429a      	cmp	r2, r3
 800215e:	d0b6      	beq.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002178:	e051      	b.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002188:	d123      	bne.n	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002198:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0204 	orr.w	r2, r3, #4
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e046      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d021      	beq.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff f9cf 	bl	800157c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d116      	bne.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0220 	orr.w	r2, r3, #32
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e020      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10c      	bne.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf14      	ite	ne
 800223a:	2301      	movne	r3, #1
 800223c:	2300      	moveq	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	e00b      	b.n	800225a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	43da      	mvns	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4013      	ands	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d18d      	bne.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002274:	e02d      	b.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f878 	bl	800236c <I2C_IsAcknowledgeFailed>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e02d      	b.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d021      	beq.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7ff f975 	bl	800157c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d116      	bne.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d1ca      	bne.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f6:	e02d      	b.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f837 	bl	800236c <I2C_IsAcknowledgeFailed>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e02d      	b.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d021      	beq.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff f934 	bl	800157c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d302      	bcc.n	8002326 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e007      	b.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b04      	cmp	r3, #4
 8002360:	d1ca      	bne.n	80022f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002382:	d11b      	bne.n	80023bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800238c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d129      	bne.n	8002434 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b20      	cmp	r3, #32
 800245a:	d12a      	bne.n	80024b2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	f023 030f 	bic.w	r3, r3, #15
 8002482:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b29a      	uxth	r2, r3
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	4313      	orrs	r3, r2
 800248c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	89fa      	ldrh	r2, [r7, #14]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e267      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d075      	beq.n	80025ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024de:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00c      	beq.n	8002504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4b85      	ldr	r3, [pc, #532]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d112      	bne.n	800251c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f6:	4b82      	ldr	r3, [pc, #520]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002502:	d10b      	bne.n	800251c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	4b7e      	ldr	r3, [pc, #504]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d05b      	beq.n	80025c8 <HAL_RCC_OscConfig+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d157      	bne.n	80025c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e242      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d106      	bne.n	8002534 <HAL_RCC_OscConfig+0x74>
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a75      	ldr	r2, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xb0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x98>
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6f      	ldr	r2, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xb0>
 8002558:	4b69      	ldr	r3, [pc, #420]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a68      	ldr	r2, [pc, #416]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a65      	ldr	r2, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff f800 	bl	800157c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fffc 	bl	800157c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e207      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b5b      	ldr	r3, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xc0>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe ffec 	bl	800157c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe ffe8 	bl	800157c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1f3      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0xe8>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b44      	ldr	r3, [pc, #272]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x152>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1c7      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4937      	ldr	r1, [pc, #220]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <HAL_RCC_OscConfig+0x244>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe ffa1 	bl	800157c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263e:	f7fe ff9d 	bl	800157c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1a8      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4925      	ldr	r1, [pc, #148]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x244>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe ff80 	bl	800157c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002680:	f7fe ff7c 	bl	800157c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e187      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d036      	beq.n	8002718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d016      	beq.n	80026e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x248>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe ff60 	bl	800157c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe ff5c 	bl	800157c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e167      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x240>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x200>
 80026de:	e01b      	b.n	8002718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x248>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e6:	f7fe ff49 	bl	800157c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	e00e      	b.n	800270c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ee:	f7fe ff45 	bl	800157c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d907      	bls.n	800270c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e150      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
 8002700:	40023800 	.word	0x40023800
 8002704:	42470000 	.word	0x42470000
 8002708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b88      	ldr	r3, [pc, #544]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ea      	bne.n	80026ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8097 	beq.w	8002854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b81      	ldr	r3, [pc, #516]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b7d      	ldr	r3, [pc, #500]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a7c      	ldr	r2, [pc, #496]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b7a      	ldr	r3, [pc, #488]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b77      	ldr	r3, [pc, #476]	; (8002934 <HAL_RCC_OscConfig+0x474>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b74      	ldr	r3, [pc, #464]	; (8002934 <HAL_RCC_OscConfig+0x474>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a73      	ldr	r2, [pc, #460]	; (8002934 <HAL_RCC_OscConfig+0x474>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7fe ff05 	bl	800157c <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe ff01 	bl	800157c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e10c      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCC_OscConfig+0x474>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x2ea>
 800279c:	4b64      	ldr	r3, [pc, #400]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a63      	ldr	r2, [pc, #396]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x324>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x30c>
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a5e      	ldr	r2, [pc, #376]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0x324>
 80027cc:	4b58      	ldr	r3, [pc, #352]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a57      	ldr	r2, [pc, #348]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	4b55      	ldr	r3, [pc, #340]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe fec6 	bl	800157c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7fe fec2 	bl	800157c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0cb      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	4b49      	ldr	r3, [pc, #292]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ee      	beq.n	80027f4 <HAL_RCC_OscConfig+0x334>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe feb0 	bl	800157c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe feac 	bl	800157c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0b5      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ee      	bne.n	8002820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a38      	ldr	r2, [pc, #224]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 800284e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a1 	beq.w	80029a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285e:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d05c      	beq.n	8002924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d141      	bne.n	80028f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCC_OscConfig+0x478>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fe80 	bl	800157c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fe7c 	bl	800157c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e087      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	3b01      	subs	r3, #1
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	491b      	ldr	r1, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x478>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fe55 	bl	800157c <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fe51 	bl	800157c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e05c      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x416>
 80028f4:	e054      	b.n	80029a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCC_OscConfig+0x478>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fe3e 	bl	800157c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fe3a 	bl	800157c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e045      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_OscConfig+0x470>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x444>
 8002922:	e03d      	b.n	80029a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d107      	bne.n	800293c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e038      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000
 8002938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x4ec>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d028      	beq.n	800299c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d121      	bne.n	800299c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d11a      	bne.n	800299c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002974:	4293      	cmp	r3, r2
 8002976:	d111      	bne.n	800299c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	3b01      	subs	r3, #1
 8002986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0cc      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d90c      	bls.n	80029ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d044      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d119      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e067      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4934      	ldr	r1, [pc, #208]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fd6c 	bl	800157c <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe fd68 	bl	800157c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e04f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d20c      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	5ccb      	ldrb	r3, [r1, r3]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fccc 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	080041a0 	.word	0x080041a0
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000014 	.word	0x20000014

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b80:	b094      	sub	sp, #80	; 0x50
 8002b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	647b      	str	r3, [r7, #68]	; 0x44
 8002b88:	2300      	movs	r3, #0
 8002b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b94:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d00d      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x40>
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	f200 80e1 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bae:	e0db      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b73      	ldr	r3, [pc, #460]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bb4:	e0db      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb6:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bba:	e0d8      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d063      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
 8002be6:	2300      	movs	r3, #0
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	0159      	lsls	r1, r3, #5
 8002bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c00:	0150      	lsls	r0, r2, #5
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4621      	mov	r1, r4
 8002c08:	1a51      	subs	r1, r2, r1
 8002c0a:	6139      	str	r1, [r7, #16]
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c20:	4659      	mov	r1, fp
 8002c22:	018b      	lsls	r3, r1, #6
 8002c24:	4651      	mov	r1, sl
 8002c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	018a      	lsls	r2, r1, #6
 8002c2e:	4651      	mov	r1, sl
 8002c30:	ebb2 0801 	subs.w	r8, r2, r1
 8002c34:	4659      	mov	r1, fp
 8002c36:	eb63 0901 	sbc.w	r9, r3, r1
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c4e:	4690      	mov	r8, r2
 8002c50:	4699      	mov	r9, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	eb18 0303 	adds.w	r3, r8, r3
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	eb49 0303 	adc.w	r3, r9, r3
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	024b      	lsls	r3, r1, #9
 8002c72:	4621      	mov	r1, r4
 8002c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c78:	4621      	mov	r1, r4
 8002c7a:	024a      	lsls	r2, r1, #9
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c82:	2200      	movs	r2, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c8c:	f7fd faae 	bl	80001ec <__aeabi_uldivmod>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4613      	mov	r3, r2
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c98:	e058      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9a:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	f04f 0000 	mov.w	r0, #0
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	0159      	lsls	r1, r3, #5
 8002cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc6:	0150      	lsls	r0, r2, #5
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4641      	mov	r1, r8
 8002cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cec:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	00eb      	lsls	r3, r5, #3
 8002cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d02:	00e2      	lsls	r2, r4, #3
 8002d04:	4614      	mov	r4, r2
 8002d06:	461d      	mov	r5, r3
 8002d08:	4643      	mov	r3, r8
 8002d0a:	18e3      	adds	r3, r4, r3
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	464b      	mov	r3, r9
 8002d10:	eb45 0303 	adc.w	r3, r5, r3
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d22:	4629      	mov	r1, r5
 8002d24:	028b      	lsls	r3, r1, #10
 8002d26:	4621      	mov	r1, r4
 8002d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	028a      	lsls	r2, r1, #10
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d36:	2200      	movs	r2, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	61fa      	str	r2, [r7, #28]
 8002d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d40:	f7fd fa54 	bl	80001ec <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d66:	e002      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3750      	adds	r7, #80	; 0x50
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	007a1200 	.word	0x007a1200

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000000 	.word	0x20000000

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da4:	f7ff fff0 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	080041b0 	.word	0x080041b0

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dcc:	f7ff ffdc 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0b5b      	lsrs	r3, r3, #13
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	080041b0 	.word	0x080041b0

08002df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e03f      	b.n	8002e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ff7a 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f929 	bl	800308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08a      	sub	sp, #40	; 0x28
 8002e8e:	af02      	add	r7, sp, #8
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d17c      	bne.n	8002fa4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_UART_Transmit+0x2c>
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e075      	b.n	8002fa6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Transmit+0x3e>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e06e      	b.n	8002fa6 <HAL_UART_Transmit+0x11c>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2221      	movs	r2, #33	; 0x21
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ede:	f7fe fb4d 	bl	800157c <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	88fa      	ldrh	r2, [r7, #6]
 8002eee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d108      	bne.n	8002f0c <HAL_UART_Transmit+0x82>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e003      	b.n	8002f14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f1c:	e02a      	b.n	8002f74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f840 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e036      	b.n	8002fa6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	3302      	adds	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	e007      	b.n	8002f66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3301      	adds	r3, #1
 8002f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1cf      	bne.n	8002f1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2140      	movs	r1, #64	; 0x40
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f810 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e006      	b.n	8002fa6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b090      	sub	sp, #64	; 0x40
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	e050      	b.n	8003062 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d04c      	beq.n	8003062 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x30>
 8002fce:	f7fe fad5 	bl	800157c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d241      	bcs.n	8003062 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ffe:	637a      	str	r2, [r7, #52]	; 0x34
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e5      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	613b      	str	r3, [r7, #16]
   return(result);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003032:	623a      	str	r2, [r7, #32]
 8003034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	69f9      	ldr	r1, [r7, #28]
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e5      	bne.n	8003012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e00f      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	429a      	cmp	r2, r3
 800307e:	d09f      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3740      	adds	r7, #64	; 0x40
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b0c0      	sub	sp, #256	; 0x100
 8003092:	af00      	add	r7, sp, #0
 8003094:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	ea40 0301 	orr.w	r3, r0, r1
 80030b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030e4:	f021 010c 	bic.w	r1, r1, #12
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030f2:	430b      	orrs	r3, r1
 80030f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003106:	6999      	ldr	r1, [r3, #24]
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	ea40 0301 	orr.w	r3, r0, r1
 8003112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b8f      	ldr	r3, [pc, #572]	; (8003358 <UART_SetConfig+0x2cc>)
 800311c:	429a      	cmp	r2, r3
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0xa0>
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b8d      	ldr	r3, [pc, #564]	; (800335c <UART_SetConfig+0x2d0>)
 8003128:	429a      	cmp	r2, r3
 800312a:	d104      	bne.n	8003136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff fe4c 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8003130:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003134:	e003      	b.n	800313e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003136:	f7ff fe33 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 800313a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	f040 810c 	bne.w	8003364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800314c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003156:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800315a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800315e:	4622      	mov	r2, r4
 8003160:	462b      	mov	r3, r5
 8003162:	1891      	adds	r1, r2, r2
 8003164:	65b9      	str	r1, [r7, #88]	; 0x58
 8003166:	415b      	adcs	r3, r3
 8003168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800316a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800316e:	4621      	mov	r1, r4
 8003170:	eb12 0801 	adds.w	r8, r2, r1
 8003174:	4629      	mov	r1, r5
 8003176:	eb43 0901 	adc.w	r9, r3, r1
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
 8003192:	4623      	mov	r3, r4
 8003194:	eb18 0303 	adds.w	r3, r8, r3
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800319c:	462b      	mov	r3, r5
 800319e:	eb49 0303 	adc.w	r3, r9, r3
 80031a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031ba:	460b      	mov	r3, r1
 80031bc:	18db      	adds	r3, r3, r3
 80031be:	653b      	str	r3, [r7, #80]	; 0x50
 80031c0:	4613      	mov	r3, r2
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	657b      	str	r3, [r7, #84]	; 0x54
 80031c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031d0:	f7fd f80c 	bl	80001ec <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4b61      	ldr	r3, [pc, #388]	; (8003360 <UART_SetConfig+0x2d4>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011c      	lsls	r4, r3, #4
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80031fc:	415b      	adcs	r3, r3
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003204:	4641      	mov	r1, r8
 8003206:	eb12 0a01 	adds.w	sl, r2, r1
 800320a:	4649      	mov	r1, r9
 800320c:	eb43 0b01 	adc.w	fp, r3, r1
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800321c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003224:	4692      	mov	sl, r2
 8003226:	469b      	mov	fp, r3
 8003228:	4643      	mov	r3, r8
 800322a:	eb1a 0303 	adds.w	r3, sl, r3
 800322e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003232:	464b      	mov	r3, r9
 8003234:	eb4b 0303 	adc.w	r3, fp, r3
 8003238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003248:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800324c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003250:	460b      	mov	r3, r1
 8003252:	18db      	adds	r3, r3, r3
 8003254:	643b      	str	r3, [r7, #64]	; 0x40
 8003256:	4613      	mov	r3, r2
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
 800325e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003266:	f7fc ffc1 	bl	80001ec <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4611      	mov	r1, r2
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <UART_SetConfig+0x2d4>)
 8003272:	fba3 2301 	umull	r2, r3, r3, r1
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2264      	movs	r2, #100	; 0x64
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	1acb      	subs	r3, r1, r3
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <UART_SetConfig+0x2d4>)
 8003288:	fba3 2302 	umull	r2, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003294:	441c      	add	r4, r3
 8003296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80032b0:	415b      	adcs	r3, r3
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6339      	str	r1, [r7, #48]	; 0x30
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ec:	464b      	mov	r3, r9
 80032ee:	460a      	mov	r2, r1
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003304:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800330c:	460b      	mov	r3, r1
 800330e:	18db      	adds	r3, r3, r3
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
 8003312:	4613      	mov	r3, r2
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800331a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800331e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003322:	f7fc ff63 	bl	80001ec <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <UART_SetConfig+0x2d4>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <UART_SetConfig+0x2d4>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 0207 	and.w	r2, r3, #7
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4422      	add	r2, r4
 8003352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003354:	e105      	b.n	8003562 <UART_SetConfig+0x4d6>
 8003356:	bf00      	nop
 8003358:	40011000 	.word	0x40011000
 800335c:	40011400 	.word	0x40011400
 8003360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003368:	2200      	movs	r2, #0
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800336e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003376:	4642      	mov	r2, r8
 8003378:	464b      	mov	r3, r9
 800337a:	1891      	adds	r1, r2, r2
 800337c:	6239      	str	r1, [r7, #32]
 800337e:	415b      	adcs	r3, r3
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003386:	4641      	mov	r1, r8
 8003388:	1854      	adds	r4, r2, r1
 800338a:	4649      	mov	r1, r9
 800338c:	eb43 0501 	adc.w	r5, r3, r1
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033ac:	464b      	mov	r3, r9
 80033ae:	eb45 0303 	adc.w	r3, r5, r3
 80033b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033d2:	4629      	mov	r1, r5
 80033d4:	008b      	lsls	r3, r1, #2
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033dc:	4621      	mov	r1, r4
 80033de:	008a      	lsls	r2, r1, #2
 80033e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033e4:	f7fc ff02 	bl	80001ec <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4b60      	ldr	r3, [pc, #384]	; (8003570 <UART_SetConfig+0x4e4>)
 80033ee:	fba3 2302 	umull	r2, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	011c      	lsls	r4, r3, #4
 80033f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	1891      	adds	r1, r2, r2
 800340e:	61b9      	str	r1, [r7, #24]
 8003410:	415b      	adcs	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003418:	4641      	mov	r1, r8
 800341a:	1851      	adds	r1, r2, r1
 800341c:	6139      	str	r1, [r7, #16]
 800341e:	4649      	mov	r1, r9
 8003420:	414b      	adcs	r3, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003430:	4659      	mov	r1, fp
 8003432:	00cb      	lsls	r3, r1, #3
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343a:	4651      	mov	r1, sl
 800343c:	00ca      	lsls	r2, r1, #3
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	4603      	mov	r3, r0
 8003444:	4642      	mov	r2, r8
 8003446:	189b      	adds	r3, r3, r2
 8003448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800344c:	464b      	mov	r3, r9
 800344e:	460a      	mov	r2, r1
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	67bb      	str	r3, [r7, #120]	; 0x78
 8003462:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003470:	4649      	mov	r1, r9
 8003472:	008b      	lsls	r3, r1, #2
 8003474:	4641      	mov	r1, r8
 8003476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347a:	4641      	mov	r1, r8
 800347c:	008a      	lsls	r2, r1, #2
 800347e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003482:	f7fc feb3 	bl	80001ec <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <UART_SetConfig+0x4e4>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	2164      	movs	r1, #100	; 0x64
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	3332      	adds	r3, #50	; 0x32
 800349e:	4a34      	ldr	r2, [pc, #208]	; (8003570 <UART_SetConfig+0x4e4>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034aa:	441c      	add	r4, r3
 80034ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b0:	2200      	movs	r2, #0
 80034b2:	673b      	str	r3, [r7, #112]	; 0x70
 80034b4:	677a      	str	r2, [r7, #116]	; 0x74
 80034b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034ba:	4642      	mov	r2, r8
 80034bc:	464b      	mov	r3, r9
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ca:	4641      	mov	r1, r8
 80034cc:	1851      	adds	r1, r2, r1
 80034ce:	6039      	str	r1, [r7, #0]
 80034d0:	4649      	mov	r1, r9
 80034d2:	414b      	adcs	r3, r1
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034e2:	4659      	mov	r1, fp
 80034e4:	00cb      	lsls	r3, r1, #3
 80034e6:	4651      	mov	r1, sl
 80034e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ec:	4651      	mov	r1, sl
 80034ee:	00ca      	lsls	r2, r1, #3
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	4603      	mov	r3, r0
 80034f6:	4642      	mov	r2, r8
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	663b      	str	r3, [r7, #96]	; 0x60
 8003510:	667a      	str	r2, [r7, #100]	; 0x64
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800351e:	4649      	mov	r1, r9
 8003520:	008b      	lsls	r3, r1, #2
 8003522:	4641      	mov	r1, r8
 8003524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003528:	4641      	mov	r1, r8
 800352a:	008a      	lsls	r2, r1, #2
 800352c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003530:	f7fc fe5c 	bl	80001ec <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <UART_SetConfig+0x4e4>)
 800353a:	fba3 1302 	umull	r1, r3, r3, r2
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2164      	movs	r1, #100	; 0x64
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	3332      	adds	r3, #50	; 0x32
 800354c:	4a08      	ldr	r2, [pc, #32]	; (8003570 <UART_SetConfig+0x4e4>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4422      	add	r2, r4
 8003560:	609a      	str	r2, [r3, #8]
}
 8003562:	bf00      	nop
 8003564:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356e:	bf00      	nop
 8003570:	51eb851f 	.word	0x51eb851f

08003574 <__errno>:
 8003574:	4b01      	ldr	r3, [pc, #4]	; (800357c <__errno+0x8>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000001c 	.word	0x2000001c

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	4d0d      	ldr	r5, [pc, #52]	; (80035b8 <__libc_init_array+0x38>)
 8003584:	4c0d      	ldr	r4, [pc, #52]	; (80035bc <__libc_init_array+0x3c>)
 8003586:	1b64      	subs	r4, r4, r5
 8003588:	10a4      	asrs	r4, r4, #2
 800358a:	2600      	movs	r6, #0
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	4d0b      	ldr	r5, [pc, #44]	; (80035c0 <__libc_init_array+0x40>)
 8003592:	4c0c      	ldr	r4, [pc, #48]	; (80035c4 <__libc_init_array+0x44>)
 8003594:	f000 fd7a 	bl	800408c <_init>
 8003598:	1b64      	subs	r4, r4, r5
 800359a:	10a4      	asrs	r4, r4, #2
 800359c:	2600      	movs	r6, #0
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	0800424c 	.word	0x0800424c
 80035bc:	0800424c 	.word	0x0800424c
 80035c0:	0800424c 	.word	0x0800424c
 80035c4:	08004250 	.word	0x08004250

080035c8 <__itoa>:
 80035c8:	1e93      	subs	r3, r2, #2
 80035ca:	2b22      	cmp	r3, #34	; 0x22
 80035cc:	b510      	push	{r4, lr}
 80035ce:	460c      	mov	r4, r1
 80035d0:	d904      	bls.n	80035dc <__itoa+0x14>
 80035d2:	2300      	movs	r3, #0
 80035d4:	700b      	strb	r3, [r1, #0]
 80035d6:	461c      	mov	r4, r3
 80035d8:	4620      	mov	r0, r4
 80035da:	bd10      	pop	{r4, pc}
 80035dc:	2a0a      	cmp	r2, #10
 80035de:	d109      	bne.n	80035f4 <__itoa+0x2c>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	da07      	bge.n	80035f4 <__itoa+0x2c>
 80035e4:	232d      	movs	r3, #45	; 0x2d
 80035e6:	700b      	strb	r3, [r1, #0]
 80035e8:	4240      	negs	r0, r0
 80035ea:	2101      	movs	r1, #1
 80035ec:	4421      	add	r1, r4
 80035ee:	f000 f883 	bl	80036f8 <__utoa>
 80035f2:	e7f1      	b.n	80035d8 <__itoa+0x10>
 80035f4:	2100      	movs	r1, #0
 80035f6:	e7f9      	b.n	80035ec <__itoa+0x24>

080035f8 <itoa>:
 80035f8:	f7ff bfe6 	b.w	80035c8 <__itoa>

080035fc <memset>:
 80035fc:	4402      	add	r2, r0
 80035fe:	4603      	mov	r3, r0
 8003600:	4293      	cmp	r3, r2
 8003602:	d100      	bne.n	8003606 <memset+0xa>
 8003604:	4770      	bx	lr
 8003606:	f803 1b01 	strb.w	r1, [r3], #1
 800360a:	e7f9      	b.n	8003600 <memset+0x4>

0800360c <_puts_r>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	4605      	mov	r5, r0
 8003612:	b118      	cbz	r0, 800361c <_puts_r+0x10>
 8003614:	6983      	ldr	r3, [r0, #24]
 8003616:	b90b      	cbnz	r3, 800361c <_puts_r+0x10>
 8003618:	f000 fa8a 	bl	8003b30 <__sinit>
 800361c:	69ab      	ldr	r3, [r5, #24]
 800361e:	68ac      	ldr	r4, [r5, #8]
 8003620:	b913      	cbnz	r3, 8003628 <_puts_r+0x1c>
 8003622:	4628      	mov	r0, r5
 8003624:	f000 fa84 	bl	8003b30 <__sinit>
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <_puts_r+0xd0>)
 800362a:	429c      	cmp	r4, r3
 800362c:	d120      	bne.n	8003670 <_puts_r+0x64>
 800362e:	686c      	ldr	r4, [r5, #4]
 8003630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003632:	07db      	lsls	r3, r3, #31
 8003634:	d405      	bmi.n	8003642 <_puts_r+0x36>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	0598      	lsls	r0, r3, #22
 800363a:	d402      	bmi.n	8003642 <_puts_r+0x36>
 800363c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363e:	f000 fb15 	bl	8003c6c <__retarget_lock_acquire_recursive>
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	0719      	lsls	r1, r3, #28
 8003646:	d51d      	bpl.n	8003684 <_puts_r+0x78>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	b1db      	cbz	r3, 8003684 <_puts_r+0x78>
 800364c:	3e01      	subs	r6, #1
 800364e:	68a3      	ldr	r3, [r4, #8]
 8003650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003654:	3b01      	subs	r3, #1
 8003656:	60a3      	str	r3, [r4, #8]
 8003658:	bb39      	cbnz	r1, 80036aa <_puts_r+0x9e>
 800365a:	2b00      	cmp	r3, #0
 800365c:	da38      	bge.n	80036d0 <_puts_r+0xc4>
 800365e:	4622      	mov	r2, r4
 8003660:	210a      	movs	r1, #10
 8003662:	4628      	mov	r0, r5
 8003664:	f000 f88a 	bl	800377c <__swbuf_r>
 8003668:	3001      	adds	r0, #1
 800366a:	d011      	beq.n	8003690 <_puts_r+0x84>
 800366c:	250a      	movs	r5, #10
 800366e:	e011      	b.n	8003694 <_puts_r+0x88>
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <_puts_r+0xd4>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d101      	bne.n	800367a <_puts_r+0x6e>
 8003676:	68ac      	ldr	r4, [r5, #8]
 8003678:	e7da      	b.n	8003630 <_puts_r+0x24>
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <_puts_r+0xd8>)
 800367c:	429c      	cmp	r4, r3
 800367e:	bf08      	it	eq
 8003680:	68ec      	ldreq	r4, [r5, #12]
 8003682:	e7d5      	b.n	8003630 <_puts_r+0x24>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f8ca 	bl	8003820 <__swsetup_r>
 800368c:	2800      	cmp	r0, #0
 800368e:	d0dd      	beq.n	800364c <_puts_r+0x40>
 8003690:	f04f 35ff 	mov.w	r5, #4294967295
 8003694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003696:	07da      	lsls	r2, r3, #31
 8003698:	d405      	bmi.n	80036a6 <_puts_r+0x9a>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	059b      	lsls	r3, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_puts_r+0x9a>
 80036a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a2:	f000 fae4 	bl	8003c6e <__retarget_lock_release_recursive>
 80036a6:	4628      	mov	r0, r5
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da04      	bge.n	80036b8 <_puts_r+0xac>
 80036ae:	69a2      	ldr	r2, [r4, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	dc06      	bgt.n	80036c2 <_puts_r+0xb6>
 80036b4:	290a      	cmp	r1, #10
 80036b6:	d004      	beq.n	80036c2 <_puts_r+0xb6>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	6022      	str	r2, [r4, #0]
 80036be:	7019      	strb	r1, [r3, #0]
 80036c0:	e7c5      	b.n	800364e <_puts_r+0x42>
 80036c2:	4622      	mov	r2, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f859 	bl	800377c <__swbuf_r>
 80036ca:	3001      	adds	r0, #1
 80036cc:	d1bf      	bne.n	800364e <_puts_r+0x42>
 80036ce:	e7df      	b.n	8003690 <_puts_r+0x84>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	250a      	movs	r5, #10
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	6022      	str	r2, [r4, #0]
 80036d8:	701d      	strb	r5, [r3, #0]
 80036da:	e7db      	b.n	8003694 <_puts_r+0x88>
 80036dc:	08004204 	.word	0x08004204
 80036e0:	08004224 	.word	0x08004224
 80036e4:	080041e4 	.word	0x080041e4

080036e8 <puts>:
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <puts+0xc>)
 80036ea:	4601      	mov	r1, r0
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	f7ff bf8d 	b.w	800360c <_puts_r>
 80036f2:	bf00      	nop
 80036f4:	2000001c 	.word	0x2000001c

080036f8 <__utoa>:
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	4c1f      	ldr	r4, [pc, #124]	; (8003778 <__utoa+0x80>)
 80036fc:	b08b      	sub	sp, #44	; 0x2c
 80036fe:	4605      	mov	r5, r0
 8003700:	460b      	mov	r3, r1
 8003702:	466e      	mov	r6, sp
 8003704:	f104 0c20 	add.w	ip, r4, #32
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	6861      	ldr	r1, [r4, #4]
 800370c:	4637      	mov	r7, r6
 800370e:	c703      	stmia	r7!, {r0, r1}
 8003710:	3408      	adds	r4, #8
 8003712:	4564      	cmp	r4, ip
 8003714:	463e      	mov	r6, r7
 8003716:	d1f7      	bne.n	8003708 <__utoa+0x10>
 8003718:	7921      	ldrb	r1, [r4, #4]
 800371a:	7139      	strb	r1, [r7, #4]
 800371c:	1e91      	subs	r1, r2, #2
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	6038      	str	r0, [r7, #0]
 8003722:	2922      	cmp	r1, #34	; 0x22
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	d904      	bls.n	8003734 <__utoa+0x3c>
 800372a:	7019      	strb	r1, [r3, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	4618      	mov	r0, r3
 8003730:	b00b      	add	sp, #44	; 0x2c
 8003732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003734:	1e58      	subs	r0, r3, #1
 8003736:	4684      	mov	ip, r0
 8003738:	fbb5 f7f2 	udiv	r7, r5, r2
 800373c:	fb02 5617 	mls	r6, r2, r7, r5
 8003740:	3628      	adds	r6, #40	; 0x28
 8003742:	446e      	add	r6, sp
 8003744:	460c      	mov	r4, r1
 8003746:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800374a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800374e:	462e      	mov	r6, r5
 8003750:	42b2      	cmp	r2, r6
 8003752:	f101 0101 	add.w	r1, r1, #1
 8003756:	463d      	mov	r5, r7
 8003758:	d9ee      	bls.n	8003738 <__utoa+0x40>
 800375a:	2200      	movs	r2, #0
 800375c:	545a      	strb	r2, [r3, r1]
 800375e:	1919      	adds	r1, r3, r4
 8003760:	1aa5      	subs	r5, r4, r2
 8003762:	42aa      	cmp	r2, r5
 8003764:	dae3      	bge.n	800372e <__utoa+0x36>
 8003766:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800376a:	780e      	ldrb	r6, [r1, #0]
 800376c:	7006      	strb	r6, [r0, #0]
 800376e:	3201      	adds	r2, #1
 8003770:	f801 5901 	strb.w	r5, [r1], #-1
 8003774:	e7f4      	b.n	8003760 <__utoa+0x68>
 8003776:	bf00      	nop
 8003778:	080041bc 	.word	0x080041bc

0800377c <__swbuf_r>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	460e      	mov	r6, r1
 8003780:	4614      	mov	r4, r2
 8003782:	4605      	mov	r5, r0
 8003784:	b118      	cbz	r0, 800378e <__swbuf_r+0x12>
 8003786:	6983      	ldr	r3, [r0, #24]
 8003788:	b90b      	cbnz	r3, 800378e <__swbuf_r+0x12>
 800378a:	f000 f9d1 	bl	8003b30 <__sinit>
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <__swbuf_r+0x98>)
 8003790:	429c      	cmp	r4, r3
 8003792:	d12b      	bne.n	80037ec <__swbuf_r+0x70>
 8003794:	686c      	ldr	r4, [r5, #4]
 8003796:	69a3      	ldr	r3, [r4, #24]
 8003798:	60a3      	str	r3, [r4, #8]
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	071a      	lsls	r2, r3, #28
 800379e:	d52f      	bpl.n	8003800 <__swbuf_r+0x84>
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	b36b      	cbz	r3, 8003800 <__swbuf_r+0x84>
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	1ac0      	subs	r0, r0, r3
 80037aa:	6963      	ldr	r3, [r4, #20]
 80037ac:	b2f6      	uxtb	r6, r6
 80037ae:	4283      	cmp	r3, r0
 80037b0:	4637      	mov	r7, r6
 80037b2:	dc04      	bgt.n	80037be <__swbuf_r+0x42>
 80037b4:	4621      	mov	r1, r4
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 f926 	bl	8003a08 <_fflush_r>
 80037bc:	bb30      	cbnz	r0, 800380c <__swbuf_r+0x90>
 80037be:	68a3      	ldr	r3, [r4, #8]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60a3      	str	r3, [r4, #8]
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	6022      	str	r2, [r4, #0]
 80037ca:	701e      	strb	r6, [r3, #0]
 80037cc:	6963      	ldr	r3, [r4, #20]
 80037ce:	3001      	adds	r0, #1
 80037d0:	4283      	cmp	r3, r0
 80037d2:	d004      	beq.n	80037de <__swbuf_r+0x62>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	07db      	lsls	r3, r3, #31
 80037d8:	d506      	bpl.n	80037e8 <__swbuf_r+0x6c>
 80037da:	2e0a      	cmp	r6, #10
 80037dc:	d104      	bne.n	80037e8 <__swbuf_r+0x6c>
 80037de:	4621      	mov	r1, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f911 	bl	8003a08 <_fflush_r>
 80037e6:	b988      	cbnz	r0, 800380c <__swbuf_r+0x90>
 80037e8:	4638      	mov	r0, r7
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <__swbuf_r+0x9c>)
 80037ee:	429c      	cmp	r4, r3
 80037f0:	d101      	bne.n	80037f6 <__swbuf_r+0x7a>
 80037f2:	68ac      	ldr	r4, [r5, #8]
 80037f4:	e7cf      	b.n	8003796 <__swbuf_r+0x1a>
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <__swbuf_r+0xa0>)
 80037f8:	429c      	cmp	r4, r3
 80037fa:	bf08      	it	eq
 80037fc:	68ec      	ldreq	r4, [r5, #12]
 80037fe:	e7ca      	b.n	8003796 <__swbuf_r+0x1a>
 8003800:	4621      	mov	r1, r4
 8003802:	4628      	mov	r0, r5
 8003804:	f000 f80c 	bl	8003820 <__swsetup_r>
 8003808:	2800      	cmp	r0, #0
 800380a:	d0cb      	beq.n	80037a4 <__swbuf_r+0x28>
 800380c:	f04f 37ff 	mov.w	r7, #4294967295
 8003810:	e7ea      	b.n	80037e8 <__swbuf_r+0x6c>
 8003812:	bf00      	nop
 8003814:	08004204 	.word	0x08004204
 8003818:	08004224 	.word	0x08004224
 800381c:	080041e4 	.word	0x080041e4

08003820 <__swsetup_r>:
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <__swsetup_r+0xcc>)
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	681d      	ldr	r5, [r3, #0]
 8003826:	4606      	mov	r6, r0
 8003828:	460c      	mov	r4, r1
 800382a:	b125      	cbz	r5, 8003836 <__swsetup_r+0x16>
 800382c:	69ab      	ldr	r3, [r5, #24]
 800382e:	b913      	cbnz	r3, 8003836 <__swsetup_r+0x16>
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f97d 	bl	8003b30 <__sinit>
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <__swsetup_r+0xd0>)
 8003838:	429c      	cmp	r4, r3
 800383a:	d10f      	bne.n	800385c <__swsetup_r+0x3c>
 800383c:	686c      	ldr	r4, [r5, #4]
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003844:	0719      	lsls	r1, r3, #28
 8003846:	d42c      	bmi.n	80038a2 <__swsetup_r+0x82>
 8003848:	06dd      	lsls	r5, r3, #27
 800384a:	d411      	bmi.n	8003870 <__swsetup_r+0x50>
 800384c:	2309      	movs	r3, #9
 800384e:	6033      	str	r3, [r6, #0]
 8003850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	f04f 30ff 	mov.w	r0, #4294967295
 800385a:	e03e      	b.n	80038da <__swsetup_r+0xba>
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <__swsetup_r+0xd4>)
 800385e:	429c      	cmp	r4, r3
 8003860:	d101      	bne.n	8003866 <__swsetup_r+0x46>
 8003862:	68ac      	ldr	r4, [r5, #8]
 8003864:	e7eb      	b.n	800383e <__swsetup_r+0x1e>
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <__swsetup_r+0xd8>)
 8003868:	429c      	cmp	r4, r3
 800386a:	bf08      	it	eq
 800386c:	68ec      	ldreq	r4, [r5, #12]
 800386e:	e7e6      	b.n	800383e <__swsetup_r+0x1e>
 8003870:	0758      	lsls	r0, r3, #29
 8003872:	d512      	bpl.n	800389a <__swsetup_r+0x7a>
 8003874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003876:	b141      	cbz	r1, 800388a <__swsetup_r+0x6a>
 8003878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800387c:	4299      	cmp	r1, r3
 800387e:	d002      	beq.n	8003886 <__swsetup_r+0x66>
 8003880:	4630      	mov	r0, r6
 8003882:	f000 fa5b 	bl	8003d3c <_free_r>
 8003886:	2300      	movs	r3, #0
 8003888:	6363      	str	r3, [r4, #52]	; 0x34
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	2300      	movs	r3, #0
 8003894:	6063      	str	r3, [r4, #4]
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	b94b      	cbnz	r3, 80038ba <__swsetup_r+0x9a>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d003      	beq.n	80038ba <__swsetup_r+0x9a>
 80038b2:	4621      	mov	r1, r4
 80038b4:	4630      	mov	r0, r6
 80038b6:	f000 fa01 	bl	8003cbc <__smakebuf_r>
 80038ba:	89a0      	ldrh	r0, [r4, #12]
 80038bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038c0:	f010 0301 	ands.w	r3, r0, #1
 80038c4:	d00a      	beq.n	80038dc <__swsetup_r+0xbc>
 80038c6:	2300      	movs	r3, #0
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6963      	ldr	r3, [r4, #20]
 80038cc:	425b      	negs	r3, r3
 80038ce:	61a3      	str	r3, [r4, #24]
 80038d0:	6923      	ldr	r3, [r4, #16]
 80038d2:	b943      	cbnz	r3, 80038e6 <__swsetup_r+0xc6>
 80038d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d8:	d1ba      	bne.n	8003850 <__swsetup_r+0x30>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	0781      	lsls	r1, r0, #30
 80038de:	bf58      	it	pl
 80038e0:	6963      	ldrpl	r3, [r4, #20]
 80038e2:	60a3      	str	r3, [r4, #8]
 80038e4:	e7f4      	b.n	80038d0 <__swsetup_r+0xb0>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7f7      	b.n	80038da <__swsetup_r+0xba>
 80038ea:	bf00      	nop
 80038ec:	2000001c 	.word	0x2000001c
 80038f0:	08004204 	.word	0x08004204
 80038f4:	08004224 	.word	0x08004224
 80038f8:	080041e4 	.word	0x080041e4

080038fc <__sflush_r>:
 80038fc:	898a      	ldrh	r2, [r1, #12]
 80038fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	0710      	lsls	r0, r2, #28
 8003906:	460c      	mov	r4, r1
 8003908:	d458      	bmi.n	80039bc <__sflush_r+0xc0>
 800390a:	684b      	ldr	r3, [r1, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	dc05      	bgt.n	800391c <__sflush_r+0x20>
 8003910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	dc02      	bgt.n	800391c <__sflush_r+0x20>
 8003916:	2000      	movs	r0, #0
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800391c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800391e:	2e00      	cmp	r6, #0
 8003920:	d0f9      	beq.n	8003916 <__sflush_r+0x1a>
 8003922:	2300      	movs	r3, #0
 8003924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003928:	682f      	ldr	r7, [r5, #0]
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	d032      	beq.n	8003994 <__sflush_r+0x98>
 800392e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	075a      	lsls	r2, r3, #29
 8003934:	d505      	bpl.n	8003942 <__sflush_r+0x46>
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	1ac0      	subs	r0, r0, r3
 800393a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800393c:	b10b      	cbz	r3, 8003942 <__sflush_r+0x46>
 800393e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003940:	1ac0      	subs	r0, r0, r3
 8003942:	2300      	movs	r3, #0
 8003944:	4602      	mov	r2, r0
 8003946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003948:	6a21      	ldr	r1, [r4, #32]
 800394a:	4628      	mov	r0, r5
 800394c:	47b0      	blx	r6
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	d106      	bne.n	8003962 <__sflush_r+0x66>
 8003954:	6829      	ldr	r1, [r5, #0]
 8003956:	291d      	cmp	r1, #29
 8003958:	d82c      	bhi.n	80039b4 <__sflush_r+0xb8>
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <__sflush_r+0x108>)
 800395c:	40ca      	lsrs	r2, r1
 800395e:	07d6      	lsls	r6, r2, #31
 8003960:	d528      	bpl.n	80039b4 <__sflush_r+0xb8>
 8003962:	2200      	movs	r2, #0
 8003964:	6062      	str	r2, [r4, #4]
 8003966:	04d9      	lsls	r1, r3, #19
 8003968:	6922      	ldr	r2, [r4, #16]
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	d504      	bpl.n	8003978 <__sflush_r+0x7c>
 800396e:	1c42      	adds	r2, r0, #1
 8003970:	d101      	bne.n	8003976 <__sflush_r+0x7a>
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	b903      	cbnz	r3, 8003978 <__sflush_r+0x7c>
 8003976:	6560      	str	r0, [r4, #84]	; 0x54
 8003978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800397a:	602f      	str	r7, [r5, #0]
 800397c:	2900      	cmp	r1, #0
 800397e:	d0ca      	beq.n	8003916 <__sflush_r+0x1a>
 8003980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003984:	4299      	cmp	r1, r3
 8003986:	d002      	beq.n	800398e <__sflush_r+0x92>
 8003988:	4628      	mov	r0, r5
 800398a:	f000 f9d7 	bl	8003d3c <_free_r>
 800398e:	2000      	movs	r0, #0
 8003990:	6360      	str	r0, [r4, #52]	; 0x34
 8003992:	e7c1      	b.n	8003918 <__sflush_r+0x1c>
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	2301      	movs	r3, #1
 8003998:	4628      	mov	r0, r5
 800399a:	47b0      	blx	r6
 800399c:	1c41      	adds	r1, r0, #1
 800399e:	d1c7      	bne.n	8003930 <__sflush_r+0x34>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0c4      	beq.n	8003930 <__sflush_r+0x34>
 80039a6:	2b1d      	cmp	r3, #29
 80039a8:	d001      	beq.n	80039ae <__sflush_r+0xb2>
 80039aa:	2b16      	cmp	r3, #22
 80039ac:	d101      	bne.n	80039b2 <__sflush_r+0xb6>
 80039ae:	602f      	str	r7, [r5, #0]
 80039b0:	e7b1      	b.n	8003916 <__sflush_r+0x1a>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	e7ad      	b.n	8003918 <__sflush_r+0x1c>
 80039bc:	690f      	ldr	r7, [r1, #16]
 80039be:	2f00      	cmp	r7, #0
 80039c0:	d0a9      	beq.n	8003916 <__sflush_r+0x1a>
 80039c2:	0793      	lsls	r3, r2, #30
 80039c4:	680e      	ldr	r6, [r1, #0]
 80039c6:	bf08      	it	eq
 80039c8:	694b      	ldreq	r3, [r1, #20]
 80039ca:	600f      	str	r7, [r1, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2300      	movne	r3, #0
 80039d0:	eba6 0807 	sub.w	r8, r6, r7
 80039d4:	608b      	str	r3, [r1, #8]
 80039d6:	f1b8 0f00 	cmp.w	r8, #0
 80039da:	dd9c      	ble.n	8003916 <__sflush_r+0x1a>
 80039dc:	6a21      	ldr	r1, [r4, #32]
 80039de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039e0:	4643      	mov	r3, r8
 80039e2:	463a      	mov	r2, r7
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b0      	blx	r6
 80039e8:	2800      	cmp	r0, #0
 80039ea:	dc06      	bgt.n	80039fa <__sflush_r+0xfe>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	e78e      	b.n	8003918 <__sflush_r+0x1c>
 80039fa:	4407      	add	r7, r0
 80039fc:	eba8 0800 	sub.w	r8, r8, r0
 8003a00:	e7e9      	b.n	80039d6 <__sflush_r+0xda>
 8003a02:	bf00      	nop
 8003a04:	20400001 	.word	0x20400001

08003a08 <_fflush_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	b913      	cbnz	r3, 8003a18 <_fflush_r+0x10>
 8003a12:	2500      	movs	r5, #0
 8003a14:	4628      	mov	r0, r5
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	b118      	cbz	r0, 8003a22 <_fflush_r+0x1a>
 8003a1a:	6983      	ldr	r3, [r0, #24]
 8003a1c:	b90b      	cbnz	r3, 8003a22 <_fflush_r+0x1a>
 8003a1e:	f000 f887 	bl	8003b30 <__sinit>
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <_fflush_r+0x6c>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d11b      	bne.n	8003a60 <_fflush_r+0x58>
 8003a28:	686c      	ldr	r4, [r5, #4]
 8003a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ef      	beq.n	8003a12 <_fflush_r+0xa>
 8003a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a34:	07d0      	lsls	r0, r2, #31
 8003a36:	d404      	bmi.n	8003a42 <_fflush_r+0x3a>
 8003a38:	0599      	lsls	r1, r3, #22
 8003a3a:	d402      	bmi.n	8003a42 <_fflush_r+0x3a>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a3e:	f000 f915 	bl	8003c6c <__retarget_lock_acquire_recursive>
 8003a42:	4628      	mov	r0, r5
 8003a44:	4621      	mov	r1, r4
 8003a46:	f7ff ff59 	bl	80038fc <__sflush_r>
 8003a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a4c:	07da      	lsls	r2, r3, #31
 8003a4e:	4605      	mov	r5, r0
 8003a50:	d4e0      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	059b      	lsls	r3, r3, #22
 8003a56:	d4dd      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5a:	f000 f908 	bl	8003c6e <__retarget_lock_release_recursive>
 8003a5e:	e7d9      	b.n	8003a14 <_fflush_r+0xc>
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_fflush_r+0x70>)
 8003a62:	429c      	cmp	r4, r3
 8003a64:	d101      	bne.n	8003a6a <_fflush_r+0x62>
 8003a66:	68ac      	ldr	r4, [r5, #8]
 8003a68:	e7df      	b.n	8003a2a <_fflush_r+0x22>
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <_fflush_r+0x74>)
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	bf08      	it	eq
 8003a70:	68ec      	ldreq	r4, [r5, #12]
 8003a72:	e7da      	b.n	8003a2a <_fflush_r+0x22>
 8003a74:	08004204 	.word	0x08004204
 8003a78:	08004224 	.word	0x08004224
 8003a7c:	080041e4 	.word	0x080041e4

08003a80 <std>:
 8003a80:	2300      	movs	r3, #0
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
 8003a86:	e9c0 3300 	strd	r3, r3, [r0]
 8003a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a8e:	6083      	str	r3, [r0, #8]
 8003a90:	8181      	strh	r1, [r0, #12]
 8003a92:	6643      	str	r3, [r0, #100]	; 0x64
 8003a94:	81c2      	strh	r2, [r0, #14]
 8003a96:	6183      	str	r3, [r0, #24]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	305c      	adds	r0, #92	; 0x5c
 8003a9e:	f7ff fdad 	bl	80035fc <memset>
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x38>)
 8003aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x3c>)
 8003aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <std+0x40>)
 8003aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <std+0x44>)
 8003ab0:	6224      	str	r4, [r4, #32]
 8003ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08003f1d 	.word	0x08003f1d
 8003abc:	08003f3f 	.word	0x08003f3f
 8003ac0:	08003f77 	.word	0x08003f77
 8003ac4:	08003f9b 	.word	0x08003f9b

08003ac8 <_cleanup_r>:
 8003ac8:	4901      	ldr	r1, [pc, #4]	; (8003ad0 <_cleanup_r+0x8>)
 8003aca:	f000 b8af 	b.w	8003c2c <_fwalk_reent>
 8003ace:	bf00      	nop
 8003ad0:	08003a09 	.word	0x08003a09

08003ad4 <__sfmoreglue>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	2268      	movs	r2, #104	; 0x68
 8003ad8:	1e4d      	subs	r5, r1, #1
 8003ada:	4355      	muls	r5, r2
 8003adc:	460e      	mov	r6, r1
 8003ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ae2:	f000 f997 	bl	8003e14 <_malloc_r>
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	b140      	cbz	r0, 8003afc <__sfmoreglue+0x28>
 8003aea:	2100      	movs	r1, #0
 8003aec:	e9c0 1600 	strd	r1, r6, [r0]
 8003af0:	300c      	adds	r0, #12
 8003af2:	60a0      	str	r0, [r4, #8]
 8003af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003af8:	f7ff fd80 	bl	80035fc <memset>
 8003afc:	4620      	mov	r0, r4
 8003afe:	bd70      	pop	{r4, r5, r6, pc}

08003b00 <__sfp_lock_acquire>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__sfp_lock_acquire+0x8>)
 8003b02:	f000 b8b3 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	20000145 	.word	0x20000145

08003b0c <__sfp_lock_release>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__sfp_lock_release+0x8>)
 8003b0e:	f000 b8ae 	b.w	8003c6e <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	20000145 	.word	0x20000145

08003b18 <__sinit_lock_acquire>:
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <__sinit_lock_acquire+0x8>)
 8003b1a:	f000 b8a7 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8003b1e:	bf00      	nop
 8003b20:	20000146 	.word	0x20000146

08003b24 <__sinit_lock_release>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__sinit_lock_release+0x8>)
 8003b26:	f000 b8a2 	b.w	8003c6e <__retarget_lock_release_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000146 	.word	0x20000146

08003b30 <__sinit>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	4604      	mov	r4, r0
 8003b34:	f7ff fff0 	bl	8003b18 <__sinit_lock_acquire>
 8003b38:	69a3      	ldr	r3, [r4, #24]
 8003b3a:	b11b      	cbz	r3, 8003b44 <__sinit+0x14>
 8003b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b40:	f7ff bff0 	b.w	8003b24 <__sinit_lock_release>
 8003b44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b48:	6523      	str	r3, [r4, #80]	; 0x50
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <__sinit+0x68>)
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <__sinit+0x6c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b52:	42a3      	cmp	r3, r4
 8003b54:	bf04      	itt	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	61a3      	streq	r3, [r4, #24]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 f820 	bl	8003ba0 <__sfp>
 8003b60:	6060      	str	r0, [r4, #4]
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f81c 	bl	8003ba0 <__sfp>
 8003b68:	60a0      	str	r0, [r4, #8]
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f000 f818 	bl	8003ba0 <__sfp>
 8003b70:	2200      	movs	r2, #0
 8003b72:	60e0      	str	r0, [r4, #12]
 8003b74:	2104      	movs	r1, #4
 8003b76:	6860      	ldr	r0, [r4, #4]
 8003b78:	f7ff ff82 	bl	8003a80 <std>
 8003b7c:	68a0      	ldr	r0, [r4, #8]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2109      	movs	r1, #9
 8003b82:	f7ff ff7d 	bl	8003a80 <std>
 8003b86:	68e0      	ldr	r0, [r4, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	2112      	movs	r1, #18
 8003b8c:	f7ff ff78 	bl	8003a80 <std>
 8003b90:	2301      	movs	r3, #1
 8003b92:	61a3      	str	r3, [r4, #24]
 8003b94:	e7d2      	b.n	8003b3c <__sinit+0xc>
 8003b96:	bf00      	nop
 8003b98:	080041b8 	.word	0x080041b8
 8003b9c:	08003ac9 	.word	0x08003ac9

08003ba0 <__sfp>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	f7ff ffac 	bl	8003b00 <__sfp_lock_acquire>
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <__sfp+0x84>)
 8003baa:	681e      	ldr	r6, [r3, #0]
 8003bac:	69b3      	ldr	r3, [r6, #24]
 8003bae:	b913      	cbnz	r3, 8003bb6 <__sfp+0x16>
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7ff ffbd 	bl	8003b30 <__sinit>
 8003bb6:	3648      	adds	r6, #72	; 0x48
 8003bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	d503      	bpl.n	8003bc8 <__sfp+0x28>
 8003bc0:	6833      	ldr	r3, [r6, #0]
 8003bc2:	b30b      	cbz	r3, 8003c08 <__sfp+0x68>
 8003bc4:	6836      	ldr	r6, [r6, #0]
 8003bc6:	e7f7      	b.n	8003bb8 <__sfp+0x18>
 8003bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bcc:	b9d5      	cbnz	r5, 8003c04 <__sfp+0x64>
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <__sfp+0x88>)
 8003bd0:	60e3      	str	r3, [r4, #12]
 8003bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bd6:	6665      	str	r5, [r4, #100]	; 0x64
 8003bd8:	f000 f847 	bl	8003c6a <__retarget_lock_init_recursive>
 8003bdc:	f7ff ff96 	bl	8003b0c <__sfp_lock_release>
 8003be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003be8:	6025      	str	r5, [r4, #0]
 8003bea:	61a5      	str	r5, [r4, #24]
 8003bec:	2208      	movs	r2, #8
 8003bee:	4629      	mov	r1, r5
 8003bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bf4:	f7ff fd02 	bl	80035fc <memset>
 8003bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c00:	4620      	mov	r0, r4
 8003c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c04:	3468      	adds	r4, #104	; 0x68
 8003c06:	e7d9      	b.n	8003bbc <__sfp+0x1c>
 8003c08:	2104      	movs	r1, #4
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f7ff ff62 	bl	8003ad4 <__sfmoreglue>
 8003c10:	4604      	mov	r4, r0
 8003c12:	6030      	str	r0, [r6, #0]
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1d5      	bne.n	8003bc4 <__sfp+0x24>
 8003c18:	f7ff ff78 	bl	8003b0c <__sfp_lock_release>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	e7ee      	b.n	8003c00 <__sfp+0x60>
 8003c22:	bf00      	nop
 8003c24:	080041b8 	.word	0x080041b8
 8003c28:	ffff0001 	.word	0xffff0001

08003c2c <_fwalk_reent>:
 8003c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c30:	4606      	mov	r6, r0
 8003c32:	4688      	mov	r8, r1
 8003c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c38:	2700      	movs	r7, #0
 8003c3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c3e:	f1b9 0901 	subs.w	r9, r9, #1
 8003c42:	d505      	bpl.n	8003c50 <_fwalk_reent+0x24>
 8003c44:	6824      	ldr	r4, [r4, #0]
 8003c46:	2c00      	cmp	r4, #0
 8003c48:	d1f7      	bne.n	8003c3a <_fwalk_reent+0xe>
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c50:	89ab      	ldrh	r3, [r5, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d907      	bls.n	8003c66 <_fwalk_reent+0x3a>
 8003c56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	d003      	beq.n	8003c66 <_fwalk_reent+0x3a>
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4630      	mov	r0, r6
 8003c62:	47c0      	blx	r8
 8003c64:	4307      	orrs	r7, r0
 8003c66:	3568      	adds	r5, #104	; 0x68
 8003c68:	e7e9      	b.n	8003c3e <_fwalk_reent+0x12>

08003c6a <__retarget_lock_init_recursive>:
 8003c6a:	4770      	bx	lr

08003c6c <__retarget_lock_acquire_recursive>:
 8003c6c:	4770      	bx	lr

08003c6e <__retarget_lock_release_recursive>:
 8003c6e:	4770      	bx	lr

08003c70 <__swhatbuf_r>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	460e      	mov	r6, r1
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	b096      	sub	sp, #88	; 0x58
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	da08      	bge.n	8003c94 <__swhatbuf_r+0x24>
 8003c82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	602a      	str	r2, [r5, #0]
 8003c8a:	061a      	lsls	r2, r3, #24
 8003c8c:	d410      	bmi.n	8003cb0 <__swhatbuf_r+0x40>
 8003c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c92:	e00e      	b.n	8003cb2 <__swhatbuf_r+0x42>
 8003c94:	466a      	mov	r2, sp
 8003c96:	f000 f9a7 	bl	8003fe8 <_fstat_r>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	dbf1      	blt.n	8003c82 <__swhatbuf_r+0x12>
 8003c9e:	9a01      	ldr	r2, [sp, #4]
 8003ca0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ca4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca8:	425a      	negs	r2, r3
 8003caa:	415a      	adcs	r2, r3
 8003cac:	602a      	str	r2, [r5, #0]
 8003cae:	e7ee      	b.n	8003c8e <__swhatbuf_r+0x1e>
 8003cb0:	2340      	movs	r3, #64	; 0x40
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	b016      	add	sp, #88	; 0x58
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cbc <__smakebuf_r>:
 8003cbc:	898b      	ldrh	r3, [r1, #12]
 8003cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cc0:	079d      	lsls	r5, r3, #30
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	d507      	bpl.n	8003cd8 <__smakebuf_r+0x1c>
 8003cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	6123      	str	r3, [r4, #16]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	6163      	str	r3, [r4, #20]
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	ab01      	add	r3, sp, #4
 8003cda:	466a      	mov	r2, sp
 8003cdc:	f7ff ffc8 	bl	8003c70 <__swhatbuf_r>
 8003ce0:	9900      	ldr	r1, [sp, #0]
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	f000 f895 	bl	8003e14 <_malloc_r>
 8003cea:	b948      	cbnz	r0, 8003d00 <__smakebuf_r+0x44>
 8003cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf0:	059a      	lsls	r2, r3, #22
 8003cf2:	d4ef      	bmi.n	8003cd4 <__smakebuf_r+0x18>
 8003cf4:	f023 0303 	bic.w	r3, r3, #3
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	e7e3      	b.n	8003cc8 <__smakebuf_r+0xc>
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <__smakebuf_r+0x7c>)
 8003d02:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	6020      	str	r0, [r4, #0]
 8003d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	6163      	str	r3, [r4, #20]
 8003d12:	9b01      	ldr	r3, [sp, #4]
 8003d14:	6120      	str	r0, [r4, #16]
 8003d16:	b15b      	cbz	r3, 8003d30 <__smakebuf_r+0x74>
 8003d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f000 f975 	bl	800400c <_isatty_r>
 8003d22:	b128      	cbz	r0, 8003d30 <__smakebuf_r+0x74>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	81a3      	strh	r3, [r4, #12]
 8003d30:	89a0      	ldrh	r0, [r4, #12]
 8003d32:	4305      	orrs	r5, r0
 8003d34:	81a5      	strh	r5, [r4, #12]
 8003d36:	e7cd      	b.n	8003cd4 <__smakebuf_r+0x18>
 8003d38:	08003ac9 	.word	0x08003ac9

08003d3c <_free_r>:
 8003d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d3e:	2900      	cmp	r1, #0
 8003d40:	d044      	beq.n	8003dcc <_free_r+0x90>
 8003d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d46:	9001      	str	r0, [sp, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d4e:	bfb8      	it	lt
 8003d50:	18e4      	addlt	r4, r4, r3
 8003d52:	f000 f97d 	bl	8004050 <__malloc_lock>
 8003d56:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <_free_r+0x94>)
 8003d58:	9801      	ldr	r0, [sp, #4]
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	b933      	cbnz	r3, 8003d6c <_free_r+0x30>
 8003d5e:	6063      	str	r3, [r4, #4]
 8003d60:	6014      	str	r4, [r2, #0]
 8003d62:	b003      	add	sp, #12
 8003d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d68:	f000 b978 	b.w	800405c <__malloc_unlock>
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	d908      	bls.n	8003d82 <_free_r+0x46>
 8003d70:	6825      	ldr	r5, [r4, #0]
 8003d72:	1961      	adds	r1, r4, r5
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf01      	itttt	eq
 8003d78:	6819      	ldreq	r1, [r3, #0]
 8003d7a:	685b      	ldreq	r3, [r3, #4]
 8003d7c:	1949      	addeq	r1, r1, r5
 8003d7e:	6021      	streq	r1, [r4, #0]
 8003d80:	e7ed      	b.n	8003d5e <_free_r+0x22>
 8003d82:	461a      	mov	r2, r3
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b10b      	cbz	r3, 8003d8c <_free_r+0x50>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d9fa      	bls.n	8003d82 <_free_r+0x46>
 8003d8c:	6811      	ldr	r1, [r2, #0]
 8003d8e:	1855      	adds	r5, r2, r1
 8003d90:	42a5      	cmp	r5, r4
 8003d92:	d10b      	bne.n	8003dac <_free_r+0x70>
 8003d94:	6824      	ldr	r4, [r4, #0]
 8003d96:	4421      	add	r1, r4
 8003d98:	1854      	adds	r4, r2, r1
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	d1e0      	bne.n	8003d62 <_free_r+0x26>
 8003da0:	681c      	ldr	r4, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	6053      	str	r3, [r2, #4]
 8003da6:	4421      	add	r1, r4
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	e7da      	b.n	8003d62 <_free_r+0x26>
 8003dac:	d902      	bls.n	8003db4 <_free_r+0x78>
 8003dae:	230c      	movs	r3, #12
 8003db0:	6003      	str	r3, [r0, #0]
 8003db2:	e7d6      	b.n	8003d62 <_free_r+0x26>
 8003db4:	6825      	ldr	r5, [r4, #0]
 8003db6:	1961      	adds	r1, r4, r5
 8003db8:	428b      	cmp	r3, r1
 8003dba:	bf04      	itt	eq
 8003dbc:	6819      	ldreq	r1, [r3, #0]
 8003dbe:	685b      	ldreq	r3, [r3, #4]
 8003dc0:	6063      	str	r3, [r4, #4]
 8003dc2:	bf04      	itt	eq
 8003dc4:	1949      	addeq	r1, r1, r5
 8003dc6:	6021      	streq	r1, [r4, #0]
 8003dc8:	6054      	str	r4, [r2, #4]
 8003dca:	e7ca      	b.n	8003d62 <_free_r+0x26>
 8003dcc:	b003      	add	sp, #12
 8003dce:	bd30      	pop	{r4, r5, pc}
 8003dd0:	20000148 	.word	0x20000148

08003dd4 <sbrk_aligned>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4e0e      	ldr	r6, [pc, #56]	; (8003e10 <sbrk_aligned+0x3c>)
 8003dd8:	460c      	mov	r4, r1
 8003dda:	6831      	ldr	r1, [r6, #0]
 8003ddc:	4605      	mov	r5, r0
 8003dde:	b911      	cbnz	r1, 8003de6 <sbrk_aligned+0x12>
 8003de0:	f000 f88c 	bl	8003efc <_sbrk_r>
 8003de4:	6030      	str	r0, [r6, #0]
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 f887 	bl	8003efc <_sbrk_r>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	d00a      	beq.n	8003e08 <sbrk_aligned+0x34>
 8003df2:	1cc4      	adds	r4, r0, #3
 8003df4:	f024 0403 	bic.w	r4, r4, #3
 8003df8:	42a0      	cmp	r0, r4
 8003dfa:	d007      	beq.n	8003e0c <sbrk_aligned+0x38>
 8003dfc:	1a21      	subs	r1, r4, r0
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 f87c 	bl	8003efc <_sbrk_r>
 8003e04:	3001      	adds	r0, #1
 8003e06:	d101      	bne.n	8003e0c <sbrk_aligned+0x38>
 8003e08:	f04f 34ff 	mov.w	r4, #4294967295
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	2000014c 	.word	0x2000014c

08003e14 <_malloc_r>:
 8003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e18:	1ccd      	adds	r5, r1, #3
 8003e1a:	f025 0503 	bic.w	r5, r5, #3
 8003e1e:	3508      	adds	r5, #8
 8003e20:	2d0c      	cmp	r5, #12
 8003e22:	bf38      	it	cc
 8003e24:	250c      	movcc	r5, #12
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	4607      	mov	r7, r0
 8003e2a:	db01      	blt.n	8003e30 <_malloc_r+0x1c>
 8003e2c:	42a9      	cmp	r1, r5
 8003e2e:	d905      	bls.n	8003e3c <_malloc_r+0x28>
 8003e30:	230c      	movs	r3, #12
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	2600      	movs	r6, #0
 8003e36:	4630      	mov	r0, r6
 8003e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e3c:	4e2e      	ldr	r6, [pc, #184]	; (8003ef8 <_malloc_r+0xe4>)
 8003e3e:	f000 f907 	bl	8004050 <__malloc_lock>
 8003e42:	6833      	ldr	r3, [r6, #0]
 8003e44:	461c      	mov	r4, r3
 8003e46:	bb34      	cbnz	r4, 8003e96 <_malloc_r+0x82>
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f7ff ffc2 	bl	8003dd4 <sbrk_aligned>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	4604      	mov	r4, r0
 8003e54:	d14d      	bne.n	8003ef2 <_malloc_r+0xde>
 8003e56:	6834      	ldr	r4, [r6, #0]
 8003e58:	4626      	mov	r6, r4
 8003e5a:	2e00      	cmp	r6, #0
 8003e5c:	d140      	bne.n	8003ee0 <_malloc_r+0xcc>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	4631      	mov	r1, r6
 8003e62:	4638      	mov	r0, r7
 8003e64:	eb04 0803 	add.w	r8, r4, r3
 8003e68:	f000 f848 	bl	8003efc <_sbrk_r>
 8003e6c:	4580      	cmp	r8, r0
 8003e6e:	d13a      	bne.n	8003ee6 <_malloc_r+0xd2>
 8003e70:	6821      	ldr	r1, [r4, #0]
 8003e72:	3503      	adds	r5, #3
 8003e74:	1a6d      	subs	r5, r5, r1
 8003e76:	f025 0503 	bic.w	r5, r5, #3
 8003e7a:	3508      	adds	r5, #8
 8003e7c:	2d0c      	cmp	r5, #12
 8003e7e:	bf38      	it	cc
 8003e80:	250c      	movcc	r5, #12
 8003e82:	4629      	mov	r1, r5
 8003e84:	4638      	mov	r0, r7
 8003e86:	f7ff ffa5 	bl	8003dd4 <sbrk_aligned>
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d02b      	beq.n	8003ee6 <_malloc_r+0xd2>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	442b      	add	r3, r5
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	e00e      	b.n	8003eb4 <_malloc_r+0xa0>
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	1b52      	subs	r2, r2, r5
 8003e9a:	d41e      	bmi.n	8003eda <_malloc_r+0xc6>
 8003e9c:	2a0b      	cmp	r2, #11
 8003e9e:	d916      	bls.n	8003ece <_malloc_r+0xba>
 8003ea0:	1961      	adds	r1, r4, r5
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	6025      	str	r5, [r4, #0]
 8003ea6:	bf18      	it	ne
 8003ea8:	6059      	strne	r1, [r3, #4]
 8003eaa:	6863      	ldr	r3, [r4, #4]
 8003eac:	bf08      	it	eq
 8003eae:	6031      	streq	r1, [r6, #0]
 8003eb0:	5162      	str	r2, [r4, r5]
 8003eb2:	604b      	str	r3, [r1, #4]
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f104 060b 	add.w	r6, r4, #11
 8003eba:	f000 f8cf 	bl	800405c <__malloc_unlock>
 8003ebe:	f026 0607 	bic.w	r6, r6, #7
 8003ec2:	1d23      	adds	r3, r4, #4
 8003ec4:	1af2      	subs	r2, r6, r3
 8003ec6:	d0b6      	beq.n	8003e36 <_malloc_r+0x22>
 8003ec8:	1b9b      	subs	r3, r3, r6
 8003eca:	50a3      	str	r3, [r4, r2]
 8003ecc:	e7b3      	b.n	8003e36 <_malloc_r+0x22>
 8003ece:	6862      	ldr	r2, [r4, #4]
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	bf0c      	ite	eq
 8003ed4:	6032      	streq	r2, [r6, #0]
 8003ed6:	605a      	strne	r2, [r3, #4]
 8003ed8:	e7ec      	b.n	8003eb4 <_malloc_r+0xa0>
 8003eda:	4623      	mov	r3, r4
 8003edc:	6864      	ldr	r4, [r4, #4]
 8003ede:	e7b2      	b.n	8003e46 <_malloc_r+0x32>
 8003ee0:	4634      	mov	r4, r6
 8003ee2:	6876      	ldr	r6, [r6, #4]
 8003ee4:	e7b9      	b.n	8003e5a <_malloc_r+0x46>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4638      	mov	r0, r7
 8003eec:	f000 f8b6 	bl	800405c <__malloc_unlock>
 8003ef0:	e7a1      	b.n	8003e36 <_malloc_r+0x22>
 8003ef2:	6025      	str	r5, [r4, #0]
 8003ef4:	e7de      	b.n	8003eb4 <_malloc_r+0xa0>
 8003ef6:	bf00      	nop
 8003ef8:	20000148 	.word	0x20000148

08003efc <_sbrk_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d06      	ldr	r5, [pc, #24]	; (8003f18 <_sbrk_r+0x1c>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fc ffe2 	bl	8000ed0 <_sbrk>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_sbrk_r+0x1a>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_sbrk_r+0x1a>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	20000150 	.word	0x20000150

08003f1c <__sread>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	460c      	mov	r4, r1
 8003f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f24:	f000 f8a0 	bl	8004068 <_read_r>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	bfab      	itete	ge
 8003f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f30:	181b      	addge	r3, r3, r0
 8003f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f36:	bfac      	ite	ge
 8003f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f3a:	81a3      	strhlt	r3, [r4, #12]
 8003f3c:	bd10      	pop	{r4, pc}

08003f3e <__swrite>:
 8003f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f42:	461f      	mov	r7, r3
 8003f44:	898b      	ldrh	r3, [r1, #12]
 8003f46:	05db      	lsls	r3, r3, #23
 8003f48:	4605      	mov	r5, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4616      	mov	r6, r2
 8003f4e:	d505      	bpl.n	8003f5c <__swrite+0x1e>
 8003f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f54:	2302      	movs	r3, #2
 8003f56:	2200      	movs	r2, #0
 8003f58:	f000 f868 	bl	800402c <_lseek_r>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	4632      	mov	r2, r6
 8003f6a:	463b      	mov	r3, r7
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f72:	f000 b817 	b.w	8003fa4 <_write_r>

08003f76 <__sseek>:
 8003f76:	b510      	push	{r4, lr}
 8003f78:	460c      	mov	r4, r1
 8003f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7e:	f000 f855 	bl	800402c <_lseek_r>
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	bf15      	itete	ne
 8003f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f92:	81a3      	strheq	r3, [r4, #12]
 8003f94:	bf18      	it	ne
 8003f96:	81a3      	strhne	r3, [r4, #12]
 8003f98:	bd10      	pop	{r4, pc}

08003f9a <__sclose>:
 8003f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9e:	f000 b813 	b.w	8003fc8 <_close_r>
	...

08003fa4 <_write_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	; (8003fc4 <_write_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fc ff3b 	bl	8000e2e <_write>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_write_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_write_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000150 	.word	0x20000150

08003fc8 <_close_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d06      	ldr	r5, [pc, #24]	; (8003fe4 <_close_r+0x1c>)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4604      	mov	r4, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	602b      	str	r3, [r5, #0]
 8003fd4:	f7fc ff47 	bl	8000e66 <_close>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_close_r+0x1a>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_close_r+0x1a>
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	20000150 	.word	0x20000150

08003fe8 <_fstat_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4d07      	ldr	r5, [pc, #28]	; (8004008 <_fstat_r+0x20>)
 8003fec:	2300      	movs	r3, #0
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	f7fc ff42 	bl	8000e7e <_fstat>
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	d102      	bne.n	8004004 <_fstat_r+0x1c>
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	b103      	cbz	r3, 8004004 <_fstat_r+0x1c>
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	bf00      	nop
 8004008:	20000150 	.word	0x20000150

0800400c <_isatty_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_isatty_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fc ff41 	bl	8000e9e <_isatty>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_isatty_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_isatty_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000150 	.word	0x20000150

0800402c <_lseek_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d07      	ldr	r5, [pc, #28]	; (800404c <_lseek_r+0x20>)
 8004030:	4604      	mov	r4, r0
 8004032:	4608      	mov	r0, r1
 8004034:	4611      	mov	r1, r2
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fc ff3a 	bl	8000eb4 <_lseek>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_lseek_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_lseek_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20000150 	.word	0x20000150

08004050 <__malloc_lock>:
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <__malloc_lock+0x8>)
 8004052:	f7ff be0b 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8004056:	bf00      	nop
 8004058:	20000144 	.word	0x20000144

0800405c <__malloc_unlock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_unlock+0x8>)
 800405e:	f7ff be06 	b.w	8003c6e <__retarget_lock_release_recursive>
 8004062:	bf00      	nop
 8004064:	20000144 	.word	0x20000144

08004068 <_read_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d07      	ldr	r5, [pc, #28]	; (8004088 <_read_r+0x20>)
 800406c:	4604      	mov	r4, r0
 800406e:	4608      	mov	r0, r1
 8004070:	4611      	mov	r1, r2
 8004072:	2200      	movs	r2, #0
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7fc febc 	bl	8000df4 <_read>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_read_r+0x1e>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_read_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	20000150 	.word	0x20000150

0800408c <_init>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr

08004098 <_fini>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr
